
// ===== Program.cs =====

using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using System.Text;
using DnDAgency.Api.Filters;
using DnDAgency.Api.Middleware;
using DnDAgency.Application.Interfaces;
using DnDAgency.Application.Services;
using DnDAgency.Domain.Interfaces;
using DnDAgency.Infrastructure.Repositories;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using DnDAgency.Infrastructure.Interfaces;
using DnDAgency.Infrastructure.Services;
using Microsoft.Extensions.FileProviders;
using DnDAgency.Infrastructure.UnitOfWork;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.
builder.Services.AddControllers(options =>
{
    options.Filters.Add<ValidationFilter>();
    options.Filters.Add<LoggingFilter>();
});

// Database
builder.Services.AddDbContext<ApplicationDbContext>(options =>
    options.UseNpgsql(
        builder.Configuration.GetConnectionString("DefaultConnection"),
        npgsqlOptions => npgsqlOptions.UseQuerySplittingBehavior(QuerySplittingBehavior.SplitQuery)
    )
);

// Repository registration 
builder.Services.AddScoped<IUserRepository, UserRepository>();
builder.Services.AddScoped<ICampaignRepository, CampaignRepository>();
builder.Services.AddScoped<ISlotRepository, SlotRepository>();
builder.Services.AddScoped<IBookingRepository, BookingRepository>();
builder.Services.AddScoped<IMasterRepository, MasterRepository>();
builder.Services.AddScoped<IRefreshTokenRepository, RefreshTokenRepository>();
builder.Services.AddScoped<IRoomRepository, RoomRepository>();
builder.Services.AddScoped(typeof(IRepository<>), typeof(GenericRepository<>));


// Service registration
builder.Services.AddScoped<IUserService, UserService>();
builder.Services.AddScoped<ICampaignService, CampaignService>();
builder.Services.AddScoped<IMasterService, MasterService>();
builder.Services.AddScoped<IBookingService, BookingService>();
builder.Services.AddScoped<IConflictCheckService, ConflictCheckService>();
builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();

builder.Services.AddSingleton<IFileStorageService>(
    new LocalFileStorageService(
        builder.Environment.WebRootPath,
        builder.Environment.ContentRootPath
    )
);


// JWT Configuration
var jwtSettings = builder.Configuration.GetSection("JwtSettings");
var key = Encoding.UTF8.GetBytes(jwtSettings["Key"]!);

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuer = true,
            ValidateAudience = true,
            ValidateLifetime = true,
            ValidateIssuerSigningKey = true,
            ValidIssuer = jwtSettings["Issuer"],
            ValidAudience = jwtSettings["Audience"],
            IssuerSigningKey = new SymmetricSecurityKey(key),
            ClockSkew = TimeSpan.Zero
        };
    });

builder.Services.AddAuthorization();

// CORS
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowDevelopment", policy =>
    {
        if (builder.Environment.IsDevelopment())
        {
            policy.AllowAnyOrigin()
                  .AllowAnyHeader()
                  .AllowAnyMethod();
        }
        else
        {
            policy.WithOrigins("https://yourdomain.com")
                  .AllowAnyHeader()
                  .AllowAnyMethod();
        }
    });
});

// Swagger/OpenAPI
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(c =>
{
    c.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "DnD Agency API",
        Version = "v1",
        Description = "API for D&D Campaign Management Agency"
    });

    c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
    {
        Description = "JWT Authorization header using the Bearer scheme. Example: \"Bearer {token}\"",
        Name = "Authorization",
        In = ParameterLocation.Header,
        Type = SecuritySchemeType.ApiKey,
        Scheme = "Bearer"
    });

    c.AddSecurityRequirement(new OpenApiSecurityRequirement
    {
        {
            new OpenApiSecurityScheme
            {
                Reference = new OpenApiReference
                {
                    Type = ReferenceType.SecurityScheme,
                    Id = "Bearer"
                }
            },
            new string[] {}
        }
    });
});

var app = builder.Build();

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseStaticFiles(new StaticFileOptions
{
    FileProvider = new PhysicalFileProvider(builder.Environment.WebRootPath),
    RequestPath = "" // URL будет совпадать с относительным путем внутри wwwroot
});

// Custom middleware
app.UseHttpsRedirection();
app.UseCors("AllowDevelopment");

app.UseMiddleware<ExceptionHandlingMiddleware>();

app.UseAuthentication();
app.UseAuthorization();

app.UseMiddleware<ResponseWrapperMiddleware>();

app.MapControllers();


app.Run();

// ===== BookingsController.cs =====

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using DnDAgency.Application.Interfaces;
using DnDAgency.Domain.Exceptions;
using System.Security.Claims;
using System.ComponentModel.DataAnnotations;
using DnDAgency.Application.DTOs.BookingsDTO;

namespace DnDAgency.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class BookingsController : ControllerBase
    {
        private readonly IBookingService _bookingService;

        public BookingsController(IBookingService bookingService)
        {
            _bookingService = bookingService;
        }

        [HttpPost]
        public async Task<IActionResult> CreateBooking([FromBody] CreateBookingDto request)
        {
            try
            {
                var userId = GetCurrentUserId();
                var booking = await _bookingService.CreateBookingAsync(
                    userId,
                    request.CampaignId,
                    request.StartTime,
                    request.PlayersCount); // Добавить этот параметр
                return CreatedAtAction(nameof(GetUserBookings), new { }, booking);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
            catch (PastSlotBookingException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
            catch (SlotFullException ex)
            {
                return Conflict(new { message = ex.Message });
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        [HttpGet("my")]
        public async Task<IActionResult> GetUserBookings()
        {
            var userId = GetCurrentUserId();
            var bookings = await _bookingService.GetUserBookingsAsync(userId);
            return Ok(bookings);
        }

        [HttpGet("{bookingId}")]
        public async Task<IActionResult> GetBooking(Guid bookingId)
        {
            try
            {
                var userId = GetCurrentUserId();
                var bookings = await _bookingService.GetUserBookingsAsync(userId);
                var booking = bookings.FirstOrDefault(b => b.Id == bookingId);

                if (booking == null)
                    return NotFound(new { message = "Booking not found or access denied" });

                return Ok(booking);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
        }

        [HttpDelete("{bookingId}")]
        public async Task<IActionResult> CancelBooking(Guid bookingId)
        {
            try
            {
                var userId = GetCurrentUserId();
                await _bookingService.CancelBookingAsync(bookingId, userId);
                return NoContent();
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
            catch (UnauthorizedAccessException ex)
            {
                return Forbid(ex.Message);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        [HttpGet("slots/{campaignId}/available")]
        [AllowAnonymous] // Доступные слоты может посмотреть любой
        public async Task<IActionResult> GetAvailableSlots(Guid campaignId)
        {
            try
            {
                var slots = await _bookingService.GetAvailableSlotsAsync(campaignId);
                return Ok(slots);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
        }

        private Guid GetCurrentUserId()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
                throw new UnauthorizedAccessException("Invalid user token");
            return userId;
        }
    }
}

// ===== CampaignsController.cs =====

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using DnDAgency.Application.Interfaces;
using DnDAgency.Application.DTOs.CampaignsDTO;
using System.ComponentModel.DataAnnotations;
using System.Security.Claims;
using DnDAgency.Domain.Interfaces;

namespace DnDAgency.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class CampaignsController : ControllerBase
    {
        private readonly ICampaignService _campaignService;
        private readonly IMasterRepository _masterRepository;

        public CampaignsController(ICampaignService campaignService, IMasterRepository masterRepository)
        {
            _campaignService = campaignService;
            _masterRepository = masterRepository;
        }

        // ---------------- PUBLIC ----------------

        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> GetAll()
        {
            var campaigns = await _campaignService.GetAllAsync();
            return Ok(campaigns);
        }

        [HttpGet("{id}")]
        [AllowAnonymous]
        public async Task<IActionResult> GetById(Guid id)
        {
            try
            {
                var campaign = await _campaignService.GetCampaignDetailsAsync(id);
                return Ok(campaign);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
        }

        [HttpGet("catalog")]
        [AllowAnonymous]
        public async Task<IActionResult> GetCatalog()
        {
            var catalog = await _campaignService.GetCampaignCatalogAsync();
            return Ok(catalog);
        }

        [HttpGet("upcoming-games")]
        [AllowAnonymous]
        public async Task<IActionResult> GetUpcomingGames()
        {
            var games = await _campaignService.GetUpcomingGamesAsync();
            return Ok(games);
        }

        [HttpGet("{campaignId}/available-slots")]
        [AllowAnonymous]
        public async Task<IActionResult> GetAvailableTimeSlots(Guid campaignId,[FromQuery] DateTime date,[FromQuery] string roomType)
        {
            try
            {
                if (!Enum.TryParse<RoomType>(roomType, true, out var roomTypeEnum))
                {
                    return BadRequest("Invalid room type. Use 'Online' or 'Physical'");
                }

                var slots = await _campaignService.GetAvailableTimeSlotsAsync(campaignId, date, roomTypeEnum);
                return Ok(new { Success = true, Data = slots, Message = "Request completed successfully" });
            }
            catch (Exception ex)
            {
                return BadRequest(new { Success = false, Message = ex.Message });
            }
        }

        // ---------------- PRIVATE / MASTER / ADMIN ----------------

        [HttpPost]
        [Authorize(Roles = "Master,Admin")]
        public async Task<IActionResult> Create([FromForm] CreateCampaignDto request)
        {
            try
            {
                var role = GetCurrentUserRole();
                var userId = GetCurrentUserId();

                var campaign = await _campaignService.CreateAsync(request, userId, role);
                return CreatedAtAction(nameof(GetById), new { id = campaign.Id }, campaign);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        [HttpPut("{id}")]
        [Authorize(Roles = "Master,Admin")]
        public async Task<IActionResult> Update(Guid id, [FromForm] UpdateCampaignDto request)
        {
            try
            {
                var role = GetCurrentUserRole();
                var userId = GetCurrentUserId();

                var campaign = await _campaignService.UpdateAsync(id, request, userId, role);
                return Ok(campaign);
            }
            catch (KeyNotFoundException ex) { return NotFound(new { message = ex.Message }); }
            catch (UnauthorizedAccessException ex) { return Forbid(ex.Message); }
            catch (ArgumentException ex) { return BadRequest(new { message = ex.Message }); }
        }

        [HttpDelete("{id}")]
        [Authorize(Roles = "Master,Admin")]
        public async Task<IActionResult> Delete(Guid id)
        {
            try
            {
                var role = GetCurrentUserRole();
                var userId = GetCurrentUserId();

                await _campaignService.DeleteAsync(id, userId, role);
                return NoContent();
            }
            catch (KeyNotFoundException ex) { return NotFound(new { message = ex.Message }); }
            catch (UnauthorizedAccessException ex) { return Forbid(ex.Message); }
            catch (InvalidOperationException ex) { return BadRequest(new { message = ex.Message }); }
        }

        [HttpPatch("{id}/toggle-status")]
        [Authorize(Roles = "Master,Admin")]
        public async Task<IActionResult> ToggleStatus(Guid id)
        {
            try
            {
                var role = GetCurrentUserRole();
                var userId = GetCurrentUserId();

                var campaign = await _campaignService.ToggleStatusAsync(id, userId, role);
                return Ok(campaign);
            }
            catch (KeyNotFoundException ex) { return NotFound(new { message = ex.Message }); }
            catch (UnauthorizedAccessException ex) { return Forbid(ex.Message); }
        }

        

        // ---------------- HELPERS ----------------

        private Guid GetCurrentUserId()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
                throw new UnauthorizedAccessException("Invalid user token");
            return userId;
        }

        private string GetCurrentUserRole()
        {
            return User.FindFirst(ClaimTypes.Role)?.Value ?? "Master";
        }
    }


}

// ===== MastersController.cs =====

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using DnDAgency.Application.Interfaces;
using System.Security.Claims;
using System.ComponentModel.DataAnnotations;
using DnDAgency.Application.DTOs.MastersDTO;

namespace DnDAgency.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [Authorize]
    public class MastersController : ControllerBase
    {
        private readonly IMasterService _masterService;

        public MastersController(IMasterService masterService)
        {
            _masterService = masterService;
        }

        [HttpGet]
        [AllowAnonymous]
        public async Task<IActionResult> GetAll()
        {
            var masters = await _masterService.GetAllAsync();
            return Ok(masters);
        }

        [HttpGet("{id}")]
        [AllowAnonymous]
        public async Task<IActionResult> GetById(Guid id)
        {
            try
            {
                var master = await _masterService.GetByIdAsync(id);
                return Ok(master);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
        }

        [HttpPost("admin-create")]
        public async Task<IActionResult> AdminCreate([FromForm] AdminCreateMasterDto request)
        {
            if (string.IsNullOrWhiteSpace(request.Name) || string.IsNullOrWhiteSpace(request.Bio))
                return BadRequest(new { message = "Name and Bio are required" });

            try
            {
                var master = await _masterService.AdminCreateMasterAsync(request);
                return CreatedAtAction(nameof(GetById), new { id = master.Id }, master);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        [HttpPost("create-profile")]
        [Authorize(Roles = "Master,Admin")]
        public async Task<IActionResult> CreateProfile([FromBody] CreateMasterProfileRequest request)
        {
            try
            {
                var userId = GetCurrentUserId();
                var master = await _masterService.CreateFromUserAsync(userId, request.Bio);
                return CreatedAtAction(nameof(GetById), new { id = master.Id }, master);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        
        [HttpPut("{id}")]
        [Authorize(Roles = "Master,Admin")]
        public async Task<IActionResult> Update(Guid id, [FromBody] UpdateMasterDto request)
        {
            try
            {
                var currentUserId = GetCurrentUserId();
                var master = await _masterService.UpdateAsync(id, request, currentUserId);
                return Ok(master);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
            catch (UnauthorizedAccessException ex)
            {
                return Forbid(ex.Message);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        
        [HttpDelete("{id}")]
        [Authorize(Roles = "Master,Admin")]
        public async Task<IActionResult> Deactivate(Guid id)
        {
            try
            {
                var currentUserId = GetCurrentUserId();
                await _masterService.DeactivateAsync(id, currentUserId);
                return NoContent();
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
            catch (UnauthorizedAccessException ex)
            {
                return Forbid(ex.Message);
            }
        }

        [HttpGet("{id}/campaigns")]
        [AllowAnonymous]
        public async Task<IActionResult> GetCampaigns(Guid id)
        {
            try
            {
                var campaigns = await _masterService.GetMasterCampaignsAsync(id);
                return Ok(campaigns);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
        }

        [HttpPost("{masterId}/campaigns")]
        public async Task<IActionResult> AddCampaignToMaster(Guid masterId, [FromBody] AddCampaignToMasterDto dto)
        {
            await _masterService.AddCampaignToMasterAsync(masterId, dto.CampaignId);
            return Ok(new { message = "Campaign added to master successfully" });
        }

        [HttpPost("{id}/campaigns/assign")]
        [Authorize(Roles = "Master,Admin")]
        public async Task<IActionResult> AssignCampaigns(Guid id, [FromBody] AssignCampaignsDto dto)
        {
            var currentUserId = GetCurrentUserId();

            await _masterService.AssignCampaignsAsync(id, dto.CampaignIds, currentUserId);

            return Ok(new { Message = "Campaigns assigned successfully" });
        }


        private Guid GetCurrentUserId()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
                throw new UnauthorizedAccessException("Invalid user token");
            return userId;
        }
    }

    public class CreateMasterProfileRequest
    {
        [Required]
        [StringLength(2000, MinimumLength = 10, ErrorMessage = "Bio must be between 10 and 2000 characters")]
        public string Bio { get; set; } = string.Empty;
    }
}

// ===== UsersController.cs =====

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Authorization;
using DnDAgency.Application.Interfaces;
using System.ComponentModel.DataAnnotations;
using System.Security.Claims;
using DnDAgency.Application.DTOs.AuthDTO;
using DnDAgency.Application.DTOs.UsersDTO;

namespace DnDAgency.Api.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class UsersController : ControllerBase
    {
        private readonly IUserService _userService;

        public UsersController(IUserService userService)
        {
            _userService = userService;
        }

        [HttpGet]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> GetAll()
        {
            var users = await _userService.GetAllAsync();
            return Ok(users);
        }

        [HttpGet("{id}")]
        [Authorize]
        public async Task<IActionResult> GetById(Guid id)
        {
            try
            {
                var currentUserId = GetCurrentUserId();
                var currentUserRole = GetCurrentUserRole();

                if (id != currentUserId && currentUserRole != "Admin")
                {
                    return Forbid("You can only view your own profile");
                }

                var user = await _userService.GetByIdAsync(id);
                return Ok(user);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
            catch (UnauthorizedAccessException)
            {
                return Forbid();
            }
        }

        [HttpGet("me")]
        [Authorize]
        public async Task<IActionResult> GetCurrentUser()
        {
            try
            {
                var userId = GetCurrentUserId();
                var user = await _userService.GetByIdAsync(userId);
                return Ok(user);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
        }

        [HttpPost("register")]
        public async Task<IActionResult> Register([FromBody] RegisterRequest request)
        {
            try
            {
                var user = await _userService.CreateAsync(request.Username, request.Email, request.Password);
                return CreatedAtAction(nameof(GetById), new { id = user.Id }, user);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        [HttpPost("login")]
        public async Task<IActionResult> Login([FromBody] LoginDto request)
        {
            try
            {
                var authResponse = await _userService.AuthenticateAsync(request.Email, request.Password);
                return Ok(authResponse);
            }
            catch (UnauthorizedAccessException ex)
            {
                return Unauthorized(new { message = ex.Message });
            }
        }

        
        [HttpPut("{id}")]
        [Authorize]
        public async Task<IActionResult> Update(Guid id, [FromBody] UpdateUserDto request)
        {
            try
            {
                var currentUserId = GetCurrentUserId();
                var user = await _userService.UpdateAsync(id, request, currentUserId);
                return Ok(user);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
            catch (UnauthorizedAccessException ex)
            {
                return Forbid(ex.Message);
            }
            catch (ArgumentException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        
        [HttpPut("change-password")]
        [Authorize]
        public async Task<IActionResult> ChangePassword([FromBody] ChangePasswordDto request)
        {
            try
            {
                var userId = GetCurrentUserId();
                await _userService.ChangePasswordAsync(userId, request);
                return Ok(new { message = "Password changed successfully" });
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
            catch (UnauthorizedAccessException ex)
            {
                return BadRequest(new { message = ex.Message });
            }
        }

        
        [HttpDelete("{id}")]
        [Authorize]
        public async Task<IActionResult> Deactivate(Guid id)
        {
            try
            {
                var currentUserId = GetCurrentUserId();
                await _userService.DeactivateAsync(id, currentUserId);
                return NoContent();
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new { message = ex.Message });
            }
            catch (UnauthorizedAccessException ex)
            {
                return Forbid(ex.Message);
            }
        }

        private Guid GetCurrentUserId()
        {
            var userIdClaim = User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userIdClaim) || !Guid.TryParse(userIdClaim, out var userId))
                throw new UnauthorizedAccessException("Invalid user token");
            return userId;
        }

        private string GetCurrentUserRole()
        {
            return User.FindFirst(ClaimTypes.Role)?.Value ?? "Player";
        }


        [HttpPost("refresh-token")]
        public async Task<IActionResult> RefreshToken([FromBody] RefreshTokenRequestDto request)
        {
            try
            {
                var authResponse = await _userService.RefreshTokenAsync(request.Token);
                return Ok(authResponse);
            }
            catch (UnauthorizedAccessException ex)
            {
                return Unauthorized(new { message = ex.Message });
            }
        }

        public class RefreshTokenRequestDto
        {
            [Required]
            public string Token { get; set; } = null!;
        }

    }

    public class RegisterRequest
    {
        [Required]
        [MinLength(3, ErrorMessage = "Username must be at least 3 characters long")]
        [MaxLength(50, ErrorMessage = "Username cannot exceed 50 characters")]
        public string Username { get; set; } = null!;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = null!;

        [Required]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = null!;
    }
}

// ===== LoggingFilter.cs =====

using Microsoft.AspNetCore.Mvc.Filters;
using System.Text.Json;

namespace DnDAgency.Api.Filters
{
    public class LoggingFilter : IActionFilter
    {
        private readonly ILogger<LoggingFilter> _logger;

        public LoggingFilter(ILogger<LoggingFilter> logger)
        {
            _logger = logger;
        }

        public void OnActionExecuting(ActionExecutingContext context)
        {
            var controllerName = context.Controller.GetType().Name;
            var actionName = context.ActionDescriptor.DisplayName;
            var arguments = JsonSerializer.Serialize(context.ActionArguments);

            _logger.LogInformation("Executing {ControllerName}.{ActionName} with arguments: {Arguments}",
                controllerName, actionName, arguments);
        }

        public void OnActionExecuted(ActionExecutedContext context)
        {
            var controllerName = context.Controller.GetType().Name;
            var actionName = context.ActionDescriptor.DisplayName;
            var statusCode = context.HttpContext.Response.StatusCode;

            _logger.LogInformation("Executed {ControllerName}.{ActionName} with status code: {StatusCode}",
                controllerName, actionName, statusCode);
        }
    }
}

// ===== RateLimitAttribute.cs =====

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;
using Microsoft.Extensions.Caching.Memory;

namespace DnDAgency.Api.Filters
{
    public class RateLimitAttribute : ActionFilterAttribute
    {
        private readonly int _maxRequests;
        private readonly TimeSpan _timeWindow;

        public RateLimitAttribute(int maxRequests = 5, int timeWindowMinutes = 1)
        {
            _maxRequests = maxRequests;
            _timeWindow = TimeSpan.FromMinutes(timeWindowMinutes);
        }

        public override void OnActionExecuting(ActionExecutingContext context)
        {
            var cache = context.HttpContext.RequestServices.GetRequiredService<IMemoryCache>();
            var ipAddress = context.HttpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown";
            var key = $"rate_limit_{ipAddress}";

            if (cache.TryGetValue(key, out List<DateTime>? requests))
            {
                var validRequests = requests!.Where(r => DateTime.UtcNow - r < _timeWindow).ToList();

                if (validRequests.Count >= _maxRequests)
                {
                    context.Result = new TooManyRequestsResult("Too many requests. Please try again later.");
                    return;
                }

                validRequests.Add(DateTime.UtcNow);
                cache.Set(key, validRequests, _timeWindow);
            }
            else
            {
                cache.Set(key, new List<DateTime> { DateTime.UtcNow }, _timeWindow);
            }

            base.OnActionExecuting(context);
        }
    }

    public class TooManyRequestsResult : IActionResult
    {
        private readonly string _message;

        public TooManyRequestsResult(string message)
        {
            _message = message;
        }

        public async Task ExecuteResultAsync(ActionContext context)
        {
            context.HttpContext.Response.StatusCode = 429;
            await context.HttpContext.Response.WriteAsync(_message);
        }
    }
}

// ===== ValidationFilter.cs =====

using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Filters;

namespace DnDAgency.Api.Filters
{
    public class ValidationFilter : IActionFilter
    {
        public void OnActionExecuted(ActionExecutedContext context)
        {
            // Nothing to do after action execution
        }

        public void OnActionExecuting(ActionExecutingContext context)
        {
            if (!context.ModelState.IsValid)
            {
                var errors = context.ModelState
                    .Where(x => x.Value?.Errors.Count > 0)
                    .SelectMany(x => x.Value!.Errors)
                    .Select(x => x.ErrorMessage)
                    .ToList();

                var response = new
                {
                    Success = false,
                    Message = "Validation failed",
                    Errors = errors
                };

                context.Result = new BadRequestObjectResult(response);
            }
        }
    }
}

// ===== ExceptionHandlingMiddleware.cs =====

using System.Net;
using System.Text.Json;

namespace DnDAgency.Api.Middleware
{
    public class ExceptionHandlingMiddleware
    {
        private readonly RequestDelegate _next;
        private readonly ILogger<ExceptionHandlingMiddleware> _logger;

        public ExceptionHandlingMiddleware(RequestDelegate next, ILogger<ExceptionHandlingMiddleware> logger)
        {
            _next = next;
            _logger = logger;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            try
            {
                await _next(context);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "An unhandled exception occurred");
                await HandleExceptionAsync(context, ex);
            }
        }

        private static async Task HandleExceptionAsync(HttpContext context, Exception exception)
        {
            if (context.Response.HasStarted)
            {
                return;
            }

            context.Response.ContentType = "application/json";


            var response = exception switch
            {
                ArgumentException => new
                {
                    StatusCode = (int)HttpStatusCode.BadRequest,
                    Message = exception.Message
                },
                KeyNotFoundException => new
                {
                    StatusCode = (int)HttpStatusCode.NotFound,
                    Message = "Resource not found"
                },
                UnauthorizedAccessException => new
                {
                    StatusCode = (int)HttpStatusCode.Unauthorized,
                    Message = "Unauthorized"
                },
                InvalidOperationException => new
                {
                    StatusCode = (int)HttpStatusCode.Forbidden,
                    Message = exception.Message 
                },
                _ => new
                {
                    StatusCode = (int)HttpStatusCode.InternalServerError,
                    Message = "An error occurred while processing your request"
                }
            };

            context.Response.StatusCode = response.StatusCode;
            var jsonResponse = JsonSerializer.Serialize(response);
            await context.Response.WriteAsync(jsonResponse);
        }

    }
}

// ===== ResponseWrapperMiddleware.cs =====

using System.Text.Json;

namespace DnDAgency.Api.Middleware
{
    public class ResponseWrapperMiddleware
    {
        private readonly RequestDelegate _next;

        public ResponseWrapperMiddleware(RequestDelegate next)
        {
            _next = next;
        }

        public async Task InvokeAsync(HttpContext context)
        {
            var originalBodyStream = context.Response.Body;

            using var responseBody = new MemoryStream();
            context.Response.Body = responseBody;

            await _next(context);

            context.Response.Body.Seek(0, SeekOrigin.Begin);
            var responseBodyText = await new StreamReader(context.Response.Body).ReadToEndAsync();
            context.Response.Body.Seek(0, SeekOrigin.Begin);

            // Wrap successful responses
            if (context.Response.StatusCode >= 200 && context.Response.StatusCode < 300 &&
                context.Response.ContentType?.Contains("application/json") == true)
            {
                var wrappedResponse = new
                {
                    Success = true,
                    Data = responseBodyText.StartsWith("{") || responseBodyText.StartsWith("[")
                        ? JsonSerializer.Deserialize<object>(responseBodyText)
                        : responseBodyText,
                    Message = "Request completed successfully"
                };

                var jsonResponse = JsonSerializer.Serialize(wrappedResponse);
                context.Response.ContentLength = null;
                context.Response.Body = originalBodyStream;
                await context.Response.WriteAsync(jsonResponse);
            }
            else
            {
                context.Response.Body = originalBodyStream;
                await context.Response.WriteAsync(responseBodyText);
            }
        }
    }
}

// ===== .NETCoreApp,Version=v8.0.AssemblyAttributes.cs =====

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

// ===== DnDAgency.Api.AssemblyInfo.cs =====

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute("29f27662-99a8-4295-b809-1945e79e4439")]
[assembly: System.Reflection.AssemblyCompanyAttribute("DnDAgency.Api")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+ca8ca7b655f9c5cb915a0f77fb977d1fdf200cc9")]
[assembly: System.Reflection.AssemblyProductAttribute("DnDAgency.Api")]
[assembly: System.Reflection.AssemblyTitleAttribute("DnDAgency.Api")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// ===== DnDAgency.Api.GlobalUsings.g.cs =====

// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// ===== DnDAgency.Api.MvcApplicationPartsAssemblyInfo.cs =====

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartAttribute("Swashbuckle.AspNetCore.SwaggerGen")]

// Generated by the MSBuild WriteCodeFragment class.


// ===== DnDAgency.AssemblyInfo.cs =====

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: Microsoft.Extensions.Configuration.UserSecrets.UserSecretsIdAttribute("29f27662-99a8-4295-b809-1945e79e4439")]
[assembly: System.Reflection.AssemblyCompanyAttribute("DnDAgency")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0")]
[assembly: System.Reflection.AssemblyProductAttribute("DnDAgency")]
[assembly: System.Reflection.AssemblyTitleAttribute("DnDAgency")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// ===== DnDAgency.GlobalUsings.g.cs =====

// <auto-generated/>
global using global::Microsoft.AspNetCore.Builder;
global using global::Microsoft.AspNetCore.Hosting;
global using global::Microsoft.AspNetCore.Http;
global using global::Microsoft.AspNetCore.Routing;
global using global::Microsoft.Extensions.Configuration;
global using global::Microsoft.Extensions.DependencyInjection;
global using global::Microsoft.Extensions.Hosting;
global using global::Microsoft.Extensions.Logging;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Net.Http.Json;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// ===== AuthResponseDto.cs =====

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using DnDAgency.Application.DTOs.UsersDTO;

namespace DnDAgency.Application.DTOs.AuthDTO
{
    public class AuthResponseDto
    {
        public string Token { get; set; } = null!;
        public UserDto User { get; set; } = null!;
        public DateTime Expires { get; set; }
        public string RefreshToken { get; set; } = null!;
    }
}

// ===== ChangePasswordDto.cs =====

using System.ComponentModel.DataAnnotations;

namespace DnDAgency.Application.DTOs.AuthDTO
{
    public class ChangePasswordDto
    {
        [Required]
        public string CurrentPassword { get; set; } = null!;

        [Required]
        [MinLength(8, ErrorMessage = "Password must be at least 8 characters long")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]+$",
            ErrorMessage = "Password must contain at least one uppercase letter, one lowercase letter, one number and one special character")]
        public string NewPassword { get; set; } = null!;

        [Required]
        [Compare("NewPassword", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = null!;
    }
}

// ===== LoginDto.cs =====

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Application.DTOs.AuthDTO
{
    public class LoginDto
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = null!;

        [Required]
        public string Password { get; set; } = null!;
    }
}

// ===== RefreshTokenDto.cs =====

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Application.DTOs.AuthDTO
{
    public class RefreshTokenDto
    {
        public string Token { get; set; } = null!;
        public DateTime Expires { get; set; }
    }
}

// ===== RefreshTokenRequestDto.cs =====

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Application.DTOs.AuthDTO
{
    public class RefreshTokenRequestDto
    {
        public string Token { get; set; } = null!;
        public string RefreshToken { get; set; } = null!;
    }
}

// ===== AvailableTimeSlot.cs =====

namespace DnDAgency.Application.DTOs.BookingsDTO
{
    public class AvailableTimeSlot
    {
        public DateTime DateTime { get; set; }
        public bool IsAvailable { get; set; }
        public int CurrentPlayers { get; set; }
        public int MaxPlayers { get; set; }
        public RoomType RoomType { get; set; } 
        public int AvailableSlots => MaxPlayers - CurrentPlayers;
    }
}

// ===== BookingDto.cs =====

using DnDAgency.Application.DTOs.UsersDTO;

namespace DnDAgency.Application.DTOs.BookingsDTO
{
    public class BookingDto
    {
        public Guid Id { get; set; }
        public Guid UserId { get; set; }
        public UserDto User { get; set; } = null!;
        public Guid SlotId { get; set; }
        public SlotDto Slot { get; set; } = null!;
        public DateTime CreatedAt { get; set; }
    }
}

// ===== CreateBookingDto.cs =====

using System.ComponentModel.DataAnnotations;

namespace DnDAgency.Application.DTOs.BookingsDTO
{
    public class CreateBookingDto
    {
        [Required]
        public Guid CampaignId { get; set; }

        [Required]
        public DateTime StartTime { get; set; }
        public int PlayersCount { get; set; } = 1;
    }
}

// ===== SlotDto.cs =====

namespace DnDAgency.Application.DTOs.BookingsDTO
{
    public class SlotDto
    {
        public Guid Id { get; set; }
        public Guid CampaignId { get; set; }
        public DateTime StartTime { get; set; }
        public string CampaignTitle { get; set; }

        public int CurrentPlayers { get; set; }
        public int AvailableSlots { get; set; }
        public bool IsFull { get; set; }
        public bool IsInPast { get; set; }
        public RoomType RoomType { get; set; }
    }
}

// ===== CampaignCatalogDto.cs =====

using System;
using System.Collections.Generic;

namespace DnDAgency.Application.DTOs.CampaignsDTO
{
    public class CampaignCatalogDto
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = null!;
        public string ImageUrl { get; set; } = null!;
        public int Level { get; set; }
        public decimal Price { get; set; }
        public List<string> Tags { get; set; } = new();
        public bool HasAvailableSlots { get; set; }
        public bool IsActive { get; set; }
    }
}

// ===== CampaignDetailsDto.cs =====

using System;
using System.Collections.Generic;
using DnDAgency.Application.DTOs.BookingsDTO;

namespace DnDAgency.Application.DTOs.CampaignsDTO
{
    public class CampaignDetailsDto
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = null!;
        public string Description { get; set; } = null!;
        public string MasterName { get; set; } = null!;
        public decimal Price { get; set; }
        public string ImageUrl { get; set; } = null!;
        public int Level { get; set; }
        public int MaxPlayers { get; set; }
        public double? DurationHours { get; set; }
        public List<string> Tags { get; set; } = new();
        public bool IsActive { get; set; }

        // список слотов для выбора
        public List<SlotDto> Slots { get; set; } = new();
    }
}

// ===== CampaignDto.cs =====

namespace DnDAgency.Application.DTOs.CampaignsDTO
{
    public class CampaignDto
    {
        public Guid Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;

        // Список мастеров, которые проводят кампанию
        public List<Guid> MasterIds { get; set; } = new();
        public List<string> MasterNames { get; set; } = new();

        public decimal Price { get; set; }
        public string ImageUrl { get; set; } = string.Empty;
        public int Level { get; set; }   // 1–20
        public List<string> Tags { get; set; } = new();
        public TimeSpan? Duration { get; set; }
        public int MaxPlayers { get; set; } // 1–8
        public bool IsActive { get; set; }
        public bool HasAvailableSlots { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public List<string> SupportedRoomTypes { get; set; } = new(); // ["Physical", "Online"]
    }
}

// ===== CreateCampaignDto.cs =====

using Microsoft.AspNetCore.Http;


public class CreateCampaignDto
{
    public string Title { get; set; } = string.Empty;
    public string Description { get; set; } = string.Empty;
    public decimal Price { get; set; }
    public IFormFile? ImageFile { get; set; }
    public int Level { get; set; }
    public List<Guid> RoomIds { get; set; } = new();
    public int MaxPlayers { get; set; } = 8;
    public List<string> Tags { get; set; } = new();
    public int? DurationHours { get; set; }

    // Список мастеров для кампании. Админ может не указывать, мастер добавляется автоматически
    public List<Guid> MasterIds { get; set; } = new();
}


// ===== UpcomingGameDto.cs =====

using System;

namespace DnDAgency.Application.DTOs.CampaignsDTO
{
    public class UpcomingGameDto
    {
        public Guid CampaignId { get; set; }
        public string CampaignTitle { get; set; } = null!;
        public string CampaignImageUrl { get; set; } = null!;
        public int Level { get; set; }

        // ближайший слот
        public Guid SlotId { get; set; }
        public DateTime StartTime { get; set; }
        public int MaxPlayers { get; set; }
        public int BookedPlayers { get; set; }
        public int AvailableSlots { get; set; }
        public bool IsFull { get; set; }
    }
}

// ===== UpdateCampaignDto.cs =====

using Microsoft.AspNetCore.Http;

public class UpdateCampaignDto
{
    public string? Title { get; set; }
    public string? Description { get; set; }
    public decimal? Price { get; set; }
    public IFormFile? ImageFile { get; set; }
    public int? Level { get; set; }
    public List<string>? SupportedRoomTypes { get; set; }
    public int? MaxPlayers { get; set; }
    public List<string> Tags { get; set; } = new();
    public int? DurationHours { get; set; }

    // Опциональный список мастеров. Админ может не указывать
    public List<Guid>? MasterIds { get; set; }
}

// ===== AddCampaignToMasterDto.cs =====

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Application.DTOs.MastersDTO
{
    public class AddCampaignToMasterDto
    {
        public Guid CampaignId { get; set; }
    }

}

// ===== AdminCreateMasterDto.cs =====

using Microsoft.AspNetCore.Http;
using System.ComponentModel.DataAnnotations;

namespace DnDAgency.Application.DTOs.MastersDTO
{
    public class AdminCreateMasterDto
    {
        // Данные пользователя
        [Required]
        [StringLength(50, MinimumLength = 3)]
        public string Username { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [StringLength(100, MinimumLength = 6)]
        public string Password { get; set; } = string.Empty;

        // Данные профиля мастера
        [Required]
        [StringLength(100, MinimumLength = 2)]
        public string Name { get; set; } = string.Empty;

        [Required]
        [StringLength(2000, MinimumLength = 10)]
        public string Bio { get; set; } = string.Empty;

        public IFormFile? Photo { get; set; }
    }
}

// ===== AssignCampaignsDto.cs =====

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Application.DTOs.MastersDTO
{
    public class AssignCampaignsDto
    {
        public List<Guid> CampaignIds { get; set; } = new();
    }
}

// ===== CreateMasterProfileDto.cs =====

using System.ComponentModel.DataAnnotations;

namespace DnDAgency.Application.DTOs.MastersDTO
{
    public class CreateMasterProfileDto
    {
        [Required]
        [StringLength(2000, MinimumLength = 10)]
        public string Bio { get; set; } = null!;
    }
}

// ===== MasterDto.cs =====

namespace DnDAgency.Application.DTOs.MastersDTO
{
    public class MasterDto
    {
        public Guid Id { get; set; }
        public Guid UserId { get; set; }
        public string Name { get; set; } = null!;
        public string Bio { get; set; } = null!;
        public bool IsActive { get; set; }
        public int CampaignCount { get; set; }
        public double AverageRating { get; set; }
        public int ReviewCount { get; set; }
        public string? PhotoUrl { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
    }
}

// ===== UpdateMasterDto.cs =====

using System.ComponentModel.DataAnnotations;

namespace DnDAgency.Application.DTOs.MastersDTO
{
    public class UpdateMasterDto
    {
        [StringLength(2000, MinimumLength = 10)]
        public string? Bio { get; set; }

        [StringLength(100, MinimumLength = 2)]
        public string? Name { get; set; }
    }
}

// ===== UpdateUserDto.cs =====

using System.ComponentModel.DataAnnotations;

namespace DnDAgency.Application.DTOs.UsersDTO
{
    public class UpdateUserDto
    {
        [StringLength(50, MinimumLength = 3)]
        [RegularExpression(@"^[a-zA-Z0-9_-]+$", ErrorMessage = "Username can only contain letters, numbers, underscores and hyphens")]
        public string? Username { get; set; }

        [EmailAddress]
        [StringLength(100)]
        public string? Email { get; set; }
    }
}

// ===== UserDto.cs =====

using DnDAgency.Application.DTOs.MastersDTO;
using DnDAgency.Domain.Enums;

namespace DnDAgency.Application.DTOs.UsersDTO
{
    public class UserDto
    {
        public Guid Id { get; set; }
        public string Username { get; set; } = null!;
        public string Email { get; set; } = null!;
        public string Role { get; set; } = null!;
        public bool IsMaster { get; set; }
        public bool IsAdmin { get; set; }
        public bool IsActive { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
        public MasterDto? MasterProfile { get; set; }
    }
}

// ===== IBookingService.cs =====

using DnDAgency.Application.DTOs.BookingsDTO;

namespace DnDAgency.Application.Interfaces
{
    public interface IBookingService
    {
        Task<List<BookingDto>> GetUserBookingsAsync(Guid userId);
        Task CancelBookingAsync(Guid bookingId, Guid userId);
        Task<List<SlotDto>> GetAvailableSlotsAsync(Guid campaignId);
        Task<BookingDto> CreateBookingAsync(Guid userId, Guid campaignId, DateTime startTime, int playersCount);
    }
}

// ===== ICampaignService.cs =====

using DnDAgency.Application.DTOs.BookingsDTO;
using DnDAgency.Application.DTOs.CampaignsDTO;

public interface ICampaignService
{
    Task<List<CampaignDto>> GetAllAsync();
    Task<CampaignDto> GetByIdAsync(Guid id);
    Task<CampaignDto> CreateAsync(CreateCampaignDto dto, Guid? currentUserId = null, string role = "Master");
    Task<CampaignDto> UpdateAsync(Guid id, UpdateCampaignDto dto, Guid currentUserId, string role, Guid? masterUserId = null);
    Task DeleteAsync(Guid id, Guid currentUserId, string role, Guid? masterUserId = null);
    Task<CampaignDto> ToggleStatusAsync(Guid id, Guid currentUserId, string role, Guid? masterUserId = null);

    // Новый метод для получения доступных временных слотов
    Task<List<AvailableTimeSlot>> GetAvailableTimeSlotsAsync(Guid campaignId, DateTime date, RoomType roomType);

    // Методы для отображения данных
    Task<CampaignDetailsDto> GetCampaignDetailsAsync(Guid id);
    Task<List<CampaignCatalogDto>> GetCampaignCatalogAsync();
    Task<List<UpcomingGameDto>> GetUpcomingGamesAsync();

}

// ===== IConflictCheckService.cs =====

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Domain.Interfaces
{
    public interface IConflictCheckService
    {
        Task<bool> HasConflictAsync(Guid campaignId, DateTime startTime, TimeSpan duration);
    }
}

// ===== IMasterService.cs =====

using DnDAgency.Application.DTOs.CampaignsDTO;
using DnDAgency.Application.DTOs.MastersDTO;

namespace DnDAgency.Application.Interfaces
{
    public interface IMasterService
    {
        Task<List<MasterDto>> GetAllAsync();
        Task<MasterDto> GetByIdAsync(Guid id);
        Task<MasterDto> CreateFromUserAsync(Guid userId, string bio);
        Task<MasterDto> UpdateAsync(Guid id, UpdateMasterDto dto, Guid currentUserId);
        Task DeactivateAsync(Guid id, Guid currentUserId);
        Task<List<CampaignDto>> GetMasterCampaignsAsync(Guid masterId);
        Task<MasterDto> AdminCreateMasterAsync(AdminCreateMasterDto dto);
        Task AddCampaignToMasterAsync(Guid masterId, Guid campaignId);
        Task AssignCampaignsAsync(Guid masterId, List<Guid> campaignIds, Guid currentUserId);
    }
}

// ===== IUserService.cs =====

using DnDAgency.Application.DTOs.AuthDTO;
using DnDAgency.Application.DTOs.UsersDTO;

namespace DnDAgency.Application.Interfaces
{
    public interface IUserService
    {
        Task<UserDto> GetByIdAsync(Guid id);
        Task<List<UserDto>> GetAllAsync();
        Task<UserDto> CreateAsync(string username, string email, string password);
        Task<UserDto> UpdateAsync(Guid id, UpdateUserDto dto, Guid currentUserId);
        Task<AuthResponseDto> AuthenticateAsync(string email, string password);
        Task ChangePasswordAsync(Guid userId, ChangePasswordDto dto);
        Task DeactivateAsync(Guid id, Guid currentUserId);
        Task<AuthResponseDto> RefreshTokenAsync(string refreshToken);

    }
}

// ===== .NETCoreApp,Version=v8.0.AssemblyAttributes.cs =====

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

// ===== DnDAgency.Application.AssemblyInfo.cs =====

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DnDAgency.Application")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+ca8ca7b655f9c5cb915a0f77fb977d1fdf200cc9")]
[assembly: System.Reflection.AssemblyProductAttribute("DnDAgency.Application")]
[assembly: System.Reflection.AssemblyTitleAttribute("DnDAgency.Application")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// ===== DnDAgency.Application.GlobalUsings.g.cs =====

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// ===== BookingService.cs =====

using DnDAgency.Application.DTOs.BookingsDTO;
using DnDAgency.Application.DTOs.UsersDTO;
using DnDAgency.Application.Interfaces;
using DnDAgency.Domain.Entities;
using DnDAgency.Domain.Exceptions;
using DnDAgency.Domain.Interfaces;
using DnDAgency.Infrastructure.Interfaces;

namespace DnDAgency.Application.Services
{
    public class BookingService : IBookingService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IConflictCheckService _conflictCheckService;

        public BookingService(
            IUnitOfWork unitOfWork,
            IConflictCheckService conflictCheckService)
        {
            _unitOfWork = unitOfWork;
            _conflictCheckService = conflictCheckService;
        }

        public async Task<BookingDto> CreateBookingAsync(Guid userId, Guid campaignId, DateTime startTime, int playersCount = 1)
        {
            using var transaction = await _unitOfWork.BeginTransactionAsync();
            try
            {
                // Преобразуем в UTC если Kind не указан
                if (startTime.Kind == DateTimeKind.Unspecified)
                {
                    startTime = DateTime.SpecifyKind(startTime, DateTimeKind.Utc);
                }

                // Валидация playersCount
                if (playersCount < 1 || playersCount > 8)
                    throw new ArgumentException("Players count must be between 1 and 8");

                // Проверяем существование пользователя
                var user = await _unitOfWork.Users.GetByIdAsync(userId);
                if (user == null)
                    throw new KeyNotFoundException("User not found");

                // Проверяем существование кампании с полной загрузкой
                var campaign = await _unitOfWork.Campaigns.GetByIdAsync(campaignId);
                if (campaign == null)
                    throw new KeyNotFoundException("Campaign not found");

                if (!campaign.DurationHours.HasValue)
                    throw new InvalidOperationException("Campaign duration is not set");

                var duration = TimeSpan.FromHours(campaign.DurationHours.Value);

                // Проверяем конфликты времени
                var hasConflict = await _conflictCheckService.HasConflictAsync(campaignId, startTime, duration);
                if (hasConflict)
                    throw new InvalidOperationException("Time slot conflicts with existing bookings");

                // Проверяем, есть ли уже слот на это время
                var existingSlot = await _unitOfWork.Slots.GetByCampaignAndTimeAsync(campaignId, startTime);

                Slot slot;

                if (existingSlot != null)
                {
                    // Проверяем, может ли пользователь забронировать этот слот
                    if (existingSlot.IsInPast)
                        throw new PastSlotBookingException();

                    // Проверяем, нет ли уже брони у этого пользователя на этот слот
                    if (existingSlot.Bookings.Any(b => b.UserId == userId))
                        throw new ArgumentException("User already has booking for this time slot");

                    // Проверяем, хватает ли места для указанного количества игроков
                    if (existingSlot.AvailableSlots < playersCount)
                        throw new ArgumentException($"Not enough available slots. Available: {existingSlot.AvailableSlots}, Requested: {playersCount}");

                    slot = existingSlot;
                }
                else
                {
                    // Валидация рабочих часов перед созданием слота
                    var timeOfDay = startTime.TimeOfDay;
                    if (timeOfDay < campaign.WorkingHoursStart)
                        throw new ArgumentException($"Start time cannot be earlier than {campaign.WorkingHoursStart}");
                    if (timeOfDay > campaign.GetMaxStartTime())
                        throw new ArgumentException($"Start time cannot be later than {campaign.GetMaxStartTime()}");

                    // Проверяем, хватает ли места в кампании для указанного количества игроков
                    if (campaign.MaxPlayers < playersCount)
                        throw new ArgumentException($"Not enough slots in campaign. Max players: {campaign.MaxPlayers}, Requested: {playersCount}");

                    // Создаем новый слот
                    slot = new Slot(campaignId, startTime);

                    // Проверяем, нет ли у пользователя уже брони на эту дату
                    var userBookingOnDate = campaign.Slots
                        .Where(s => s.StartTime.Date == startTime.Date)
                        .SelectMany(s => s.Bookings)
                        .Any(b => b.UserId == userId);

                    if (userBookingOnDate)
                        throw new ArgumentException("User already has booking on this date");

                    await _unitOfWork.Slots.AddAsync(slot);
                    await _unitOfWork.SaveChangesAsync(); // Сохраняем слот, чтобы получить ID
                }

                // Создаем бронирование с указанием количества игроков
                var booking = new Booking(userId, slot.Id, playersCount);
                await _unitOfWork.Bookings.AddAsync(booking);
                await _unitOfWork.SaveChangesAsync();

                await _unitOfWork.CommitTransactionAsync();

                // Перезагружаем бронирование с полными данными
                booking = await _unitOfWork.Bookings.GetByIdAsync(booking.Id);
                return MapToDto(booking!);
            }
            catch
            {
                await _unitOfWork.RollbackTransactionAsync();
                throw;
            }
        }

        public async Task<List<BookingDto>> GetUserBookingsAsync(Guid userId)
        {
            var bookings = await _unitOfWork.Bookings.GetByUserIdAsync(userId);
            return bookings.Select(MapToDto).ToList();
        }

        public async Task CancelBookingAsync(Guid bookingId, Guid userId)
        {
            using var transaction = await _unitOfWork.BeginTransactionAsync();
            try
            {
                var booking = await _unitOfWork.Bookings.GetByIdAsync(bookingId);
                if (booking == null)
                    throw new KeyNotFoundException("Booking not found");

                if (booking.UserId != userId)
                    throw new UnauthorizedAccessException("Cannot cancel booking of another user");

                if (booking.Slot.StartTime < DateTime.UtcNow)
                    throw new ArgumentException("Cannot cancel booking for past slot");

                // Проверяем, можно ли отменить бронь (например, за 2 часа до начала)
                var hoursBeforeStart = (booking.Slot.StartTime - DateTime.UtcNow).TotalHours;
                if (hoursBeforeStart < 2)
                    throw new ArgumentException("Cannot cancel booking less than 2 hours before start");

                _unitOfWork.Bookings.Delete(booking);
                _unitOfWork.Slots.Delete(booking.Slot);
                await _unitOfWork.SaveChangesAsync();
                await _unitOfWork.CommitTransactionAsync();
            }
            catch
            {
                await _unitOfWork.RollbackTransactionAsync();
                throw;
            }
        }

        public async Task<List<SlotDto>> GetAvailableSlotsAsync(Guid campaignId)
        {
            var slots = await _unitOfWork.Slots.GetAvailableSlotsByCampaignIdAsync(campaignId);
            var availableSlots = new List<SlotDto>();

            foreach (var slot in slots)
            {
                var campaign = slot.Campaign;
                if (!campaign.DurationHours.HasValue)
                    continue;

                var slotDuration = TimeSpan.FromHours(campaign.DurationHours.Value);

                // Проверяем, не в прошлом ли слот и есть ли свободные места
                if (!CanBeBooked(slot))
                    continue;

                // Проверяем пересечение со всеми кампаниями в той же комнате / с мастерами
                var hasConflict = await _conflictCheckService.HasConflictAsync(campaignId, slot.StartTime, slotDuration);

                // Если конфликта нет, добавляем в доступные
                if (!hasConflict)
                    availableSlots.Add(MapSlotToDto(slot));
            }

            return availableSlots;
        }

        // --- Helpers ---

        private static bool CanBeBooked(Slot slot)
        {
            var maxPlayers = slot.Campaign.MaxPlayers;
            var bookedPlayers = slot.Bookings.Count;
            return slot.StartTime > DateTime.UtcNow && bookedPlayers < maxPlayers;
        }

        private static BookingDto MapToDto(Booking booking)
        {
            return new BookingDto
            {
                Id = booking.Id,
                UserId = booking.UserId,
                User = new UserDto
                {
                    Id = booking.User.Id,
                    Username = booking.User.Username,
                    Email = booking.User.Email,
                    Role = booking.User.Role.ToString(),
                    IsMaster = booking.User.IsMaster,
                    IsAdmin = booking.User.IsAdmin
                },
                SlotId = booking.SlotId,
                Slot = MapSlotToDto(booking.Slot),
                CreatedAt = booking.CreatedAt
            };
        }

        private static SlotDto MapSlotToDto(Slot slot)
        {
            var currentPlayers = slot.Bookings.Sum(b => b.PlayersCount); 
            var availableSlots = slot.Campaign.MaxPlayers - currentPlayers;

            return new SlotDto
            {
                Id = slot.Id,
                CampaignId = slot.CampaignId,
                StartTime = slot.StartTime,
                CampaignTitle = slot.Campaign.Title,
                CurrentPlayers = currentPlayers,
                AvailableSlots = availableSlots,
                IsFull = availableSlots <= 0,
                IsInPast = slot.StartTime < DateTime.UtcNow
            };
        }
    }
}

// ===== CampaignService.cs =====

using DnDAgency.Application.DTOs.BookingsDTO;
using DnDAgency.Application.DTOs.CampaignsDTO;
using DnDAgency.Domain.Entities;
using DnDAgency.Domain.Interfaces;
using DnDAgency.Infrastructure.Interfaces;

namespace DnDAgency.Application.Services
{
    public class CampaignService : ICampaignService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IFileStorageService _fileStorageService;
        private readonly IConflictCheckService _conflictCheckService;

        public CampaignService(
            IUnitOfWork unitOfWork,
            IFileStorageService fileStorageService,
            IConflictCheckService conflictCheckService)
        {
            _unitOfWork = unitOfWork;
            _fileStorageService = fileStorageService;
            _conflictCheckService = conflictCheckService;
        }

        // --- Получение данных ---
        public async Task<List<CampaignDto>> GetAllAsync()
        {
            var campaigns = await _unitOfWork.Campaigns.GetActiveCampaignsAsync();
            return campaigns.Select(MapToDto).ToList();
        }

        public async Task<CampaignDto> GetByIdAsync(Guid id)
        {
            var campaign = await _unitOfWork.Campaigns.GetByIdAsync(id);
            if (campaign == null)
                throw new KeyNotFoundException("Campaign not found");

            return MapToDto(campaign);
        }

        // --- Создание кампании ---
        public async Task<CampaignDto> CreateAsync(CreateCampaignDto dto, Guid? currentUserId = null, string role = "Master")
        {
            using var transaction = await _unitOfWork.BeginTransactionAsync();
            try
            {
                List<Master> masters = new List<Master>();

                if (role == "Master" && currentUserId.HasValue)
                {
                    var master = await _unitOfWork.Masters.GetByIdAsync(currentUserId.Value);
                    if (master == null)
                        throw new KeyNotFoundException("Master not found");
                    masters.Add(master);
                }
                else if (role == "Admin" && dto.MasterIds.Any())
                {
                    masters = await _unitOfWork.Campaigns.GetMastersByIdsAsync(dto.MasterIds);

                    if (masters.Count != dto.MasterIds.Count)
                    {
                        var foundIds = masters.Select(m => m.Id).ToHashSet();
                        var notFound = dto.MasterIds.Where(id => !foundIds.Contains(id)).ToList();
                        throw new KeyNotFoundException($"Masters not found: {string.Join(", ", notFound)}");
                    }
                }

                var rooms = await _unitOfWork.Campaigns.GetRoomsByIdsAsync(dto.RoomIds);
                if (rooms.Count != dto.RoomIds.Count)
                {
                    var foundIds = rooms.Select(r => r.Id).ToHashSet();
                    var notFound = dto.RoomIds.Where(id => !foundIds.Contains(id)).ToList();
                    throw new KeyNotFoundException($"Rooms not found: {string.Join(", ", notFound)}");
                }

                string? imageUrl = null;
                if (dto.ImageFile != null)
                    imageUrl = await _fileStorageService.SaveFileAsync(dto.ImageFile, "campaigns");

                var campaign = new Campaign(
                    dto.Title,
                    dto.Description,
                    dto.Price,
                    imageUrl,
                    dto.Level,
                    rooms,
                    dto.MaxPlayers,
                    dto.DurationHours,
                    masters
                );

                if (dto.Tags != null)
                    campaign.Tags.AddRange(dto.Tags.Select(tag => new CampaignTag(tag, campaign.Id)));

                await _unitOfWork.Campaigns.AddAsync(campaign);
                await _unitOfWork.SaveChangesAsync();
                await _unitOfWork.CommitTransactionAsync();

                return MapToDto(campaign);
            }
            catch
            {
                await _unitOfWork.RollbackTransactionAsync();
                throw;
            }
        }

        // --- Проверка прав доступа ---
        private static void CheckAccess(Campaign campaign, Guid currentUserId, string role)
        {
            if (role == "Admin")
                return;

            if (role == "Master" && (campaign.Masters == null || !campaign.Masters.Any(m => m.Id == currentUserId)))
                throw new UnauthorizedAccessException("You can only modify your own campaigns");

            if (role != "Admin" && role != "Master")
                throw new UnauthorizedAccessException("Invalid role");
        }

        // --- Обновление кампании ---
        public async Task<CampaignDto> UpdateAsync(Guid id, UpdateCampaignDto dto, Guid currentUserId, string role, Guid? masterUserId = null)
        {
            using var transaction = await _unitOfWork.BeginTransactionAsync();
            try
            {
                var campaign = await _unitOfWork.Campaigns.GetByIdForUpdateAsync(id);
                if (campaign == null)
                    throw new KeyNotFoundException("Campaign not found");

                CheckAccess(campaign, currentUserId, role);

                // Обновляем поля через методы домена
                if (!string.IsNullOrWhiteSpace(dto.Title))
                    campaign.UpdateTitle(dto.Title);
                if (!string.IsNullOrWhiteSpace(dto.Description))
                    campaign.UpdateDescription(dto.Description);
                if (dto.Price.HasValue)
                    campaign.UpdatePrice(dto.Price.Value);
                if (dto.Level.HasValue)
                    campaign.UpdateLevel(dto.Level.Value);
                if (dto.MaxPlayers.HasValue)
                    campaign.UpdateMaxPlayers(dto.MaxPlayers.Value);
                if (dto.DurationHours.HasValue)
                    campaign.UpdateDuration(dto.DurationHours);

                // Обработка изображения
                if (dto.ImageFile != null)
                {
                    var imageUrl = await _fileStorageService.SaveFileAsync(dto.ImageFile, "campaigns");
                    campaign.UpdateImageUrl(imageUrl);
                }

                // Обработка тегов
                if (dto.Tags != null)
                {
                    await _unitOfWork.Campaigns.UpdateCampaignTagsAsync(campaign.Id, dto.Tags);
                }

                // Обработка мастеров (только для админа)
                if (role == "Admin" && dto.MasterIds != null)
                {
                    campaign.Masters.Clear();

                    if (dto.MasterIds.Any())
                    {
                        var newMasters = await _unitOfWork.Campaigns.GetMastersByIdsAsync(dto.MasterIds);

                        if (newMasters.Count != dto.MasterIds.Count)
                        {
                            var foundIds = newMasters.Select(m => m.Id).ToHashSet();
                            var notFound = dto.MasterIds.Where(id => !foundIds.Contains(id)).ToList();
                            throw new KeyNotFoundException($"Masters not found: {string.Join(", ", notFound)}");
                        }

                        foreach (var master in newMasters)
                            campaign.Masters.Add(master);
                    }
                }

                // Обработка комнат
                if (dto.SupportedRoomTypes != null)
                {
                    var roomIds = dto.SupportedRoomTypes.Any()
                        ? (await _unitOfWork.Campaigns.GetRoomsByTypesAsync(dto.SupportedRoomTypes))
                              .Select(r => r.Id).ToList()
                        : new List<Guid>();

                    await _unitOfWork.Campaigns.UpdateCampaignRoomsAsync(campaign.Id, roomIds);
                }

                await _unitOfWork.SaveChangesAsync();
                await _unitOfWork.CommitTransactionAsync();
                return MapToDto(campaign);
            }
            catch
            {
                await _unitOfWork.RollbackTransactionAsync();
                throw;
            }
        }

        // --- Удаление кампании ---
        public async Task DeleteAsync(Guid id, Guid currentUserId, string role, Guid? masterUserId = null)
        {
            var campaign = await _unitOfWork.Campaigns.GetByIdForUpdateAsync(id);
            if (campaign == null)
                throw new KeyNotFoundException("Campaign not found");

            CheckAccess(campaign, currentUserId, role);

            var slots = await _unitOfWork.Slots.GetByCampaignIdAsync(id);
            var hasActiveBookings = slots.Any(s => s.Bookings.Any() && s.StartTime > DateTime.UtcNow);

            if (hasActiveBookings)
                throw new InvalidOperationException("Cannot delete campaign with active bookings");

            campaign.Deactivate();
            await _unitOfWork.SaveChangesAsync();
        }

        // --- Переключение активности ---
        public async Task<CampaignDto> ToggleStatusAsync(Guid id, Guid currentUserId, string role, Guid? masterUserId = null)
        {
            var campaign = await _unitOfWork.Campaigns.GetByIdForUpdateAsync(id);
            if (campaign == null)
                throw new KeyNotFoundException("Campaign not found");

            CheckAccess(campaign, currentUserId, role);

            if (campaign.IsActive)
                campaign.Deactivate();
            else
                campaign.Activate();

            await _unitOfWork.SaveChangesAsync();
            return MapToDto(campaign);
        }

        // --- Детали и каталог ---
        public async Task<CampaignDetailsDto> GetCampaignDetailsAsync(Guid id)
        {
            var campaign = await _unitOfWork.Campaigns.GetByIdAsync(id);
            if (campaign == null)
                throw new KeyNotFoundException("Campaign not found");

            return MapToCampaignDetailsDto(campaign);
        }

        public async Task<List<CampaignCatalogDto>> GetCampaignCatalogAsync()
        {
            var campaigns = await _unitOfWork.Campaigns.GetCampaignCatalogAsync();

            var campaignIds = campaigns.Select(c => c.Id).ToList();
            var campaignIdsWithSlots = await _unitOfWork.Slots.GetCampaignIdsWithAvailableSlotsAsync(campaignIds);

            return campaigns.Select(c => MapToCampaignCatalogDto(c, campaignIdsWithSlots.Contains(c.Id))).ToList();
        }

        public async Task<List<UpcomingGameDto>> GetUpcomingGamesAsync()
        {
            var slots = await _unitOfWork.Slots.GetUpcomingSlotsAsync();
            return slots.Select(MapToUpcomingGameDto).ToList();
        }

        public async Task<List<AvailableTimeSlot>> GetAvailableTimeSlotsAsync(Guid campaignId, DateTime date, RoomType roomType)
        {
            var campaign = await _unitOfWork.Campaigns.GetByIdWithSlotsAsync(campaignId);
            if (campaign == null || !campaign.DurationHours.HasValue || !campaign.SupportsRoomType(roomType))
                return new List<AvailableTimeSlot>();

            var room = campaign.Rooms.FirstOrDefault(r => r.Type == roomType);
            if (room == null)
                return new List<AvailableTimeSlot>();

            var roomConflicts = await _unitOfWork.Slots.GetBookedSlotsForRoomAndDateAsync(room.Id, date);
            var existingSlots = campaign.Slots.Where(s => s.StartTime.Date == date.Date).ToList();

            var slotIds = existingSlots.Select(s => s.Id).ToList();
            var playersCount = slotIds.Any()
                ? await _unitOfWork.Slots.GetPlayersCountForSlotsAsync(slotIds)
                : new Dictionary<Guid, int>();

            var duration = TimeSpan.FromHours(campaign.DurationHours.Value);
            var result = new List<AvailableTimeSlot>();
            var currentTime = campaign.WorkingHoursStart;

            while (currentTime <= campaign.GetMaxStartTime())
            {
                var slotDateTime = DateTime.SpecifyKind(date.Date, DateTimeKind.Utc).Add(currentTime);
                if (slotDateTime <= DateTime.UtcNow)
                {
                    currentTime = currentTime.Add(TimeSpan.FromHours(1));
                    continue;
                }

                var existingSlot = existingSlots.FirstOrDefault(s => s.StartTime == slotDateTime);
                var currentPlayers = existingSlot != null ? playersCount.GetValueOrDefault(existingSlot.Id, 0) : 0;
                bool isAvailable = currentPlayers < campaign.MaxPlayers;

                if (isAvailable && HasTimeConflict(slotDateTime, duration, roomConflicts, existingSlot?.Id))
                {
                    isAvailable = false;
                }

                if (isAvailable)
                {
                    result.Add(new AvailableTimeSlot
                    {
                        DateTime = slotDateTime,
                        IsAvailable = true,
                        CurrentPlayers = currentPlayers,
                        MaxPlayers = campaign.MaxPlayers,
                        RoomType = roomType
                    });
                }
                currentTime = currentTime.Add(TimeSpan.FromHours(1));
            }
            return result;
        }

        // --- Mapping ---
        private static CampaignDetailsDto MapToCampaignDetailsDto(Campaign campaign)
        {
            return new CampaignDetailsDto
            {
                Id = campaign.Id,
                Title = campaign.Title,
                Description = campaign.Description,
                MasterName = string.Join(", ", campaign.Masters?.Select(m => m.Name) ?? new List<string> { "Unknown" }),
                Price = campaign.Price,
                ImageUrl = campaign.ImageUrl,
                Level = campaign.Level,
                MaxPlayers = campaign.MaxPlayers,
                DurationHours = campaign.DurationHours,
                Tags = campaign.Tags.Select(t => t.Name).ToList(),
                IsActive = campaign.IsActive,
                Slots = campaign.Slots.Select(MapSlotToDto).ToList()
            };
        }

        private static CampaignCatalogDto MapToCampaignCatalogDto(Campaign campaign, bool hasAvailableSlots)
        {
            return new CampaignCatalogDto
            {
                Id = campaign.Id,
                Title = campaign.Title,
                ImageUrl = campaign.ImageUrl,
                Level = campaign.Level,
                Price = campaign.Price,
                Tags = campaign.Tags.Select(t => t.Name).ToList(),
                HasAvailableSlots = hasAvailableSlots,
                IsActive = campaign.IsActive
            };
        }

        private static UpcomingGameDto MapToUpcomingGameDto(Slot slot)
        {
            var campaign = slot.Campaign ?? throw new InvalidOperationException("Slot must have a campaign reference");

            return new UpcomingGameDto
            {
                SlotId = slot.Id,
                CampaignId = campaign.Id,
                CampaignTitle = campaign.Title,
                CampaignImageUrl = campaign.ImageUrl, // Добавь если есть
                Level = campaign.Level,
                StartTime = slot.StartTime,
                MaxPlayers = campaign.MaxPlayers, // Добавь эту строку
                BookedPlayers = slot.CurrentPlayers,
                AvailableSlots = campaign.MaxPlayers - slot.Bookings.Count,
                IsFull = (campaign.MaxPlayers - slot.Bookings.Count) <= 0
            };
        }

        private static CampaignDto MapToDto(Campaign campaign)
        {
            return new CampaignDto
            {
                Id = campaign.Id,
                Title = campaign.Title,
                Description = campaign.Description,
                MasterIds = campaign.Masters?.Select(m => m.Id).ToList() ?? new List<Guid>(),
                MasterNames = campaign.Masters?.Select(m => m.Name).ToList() ?? new List<string>(),
                Price = campaign.Price,
                ImageUrl = campaign.ImageUrl,
                Level = campaign.Level,
                MaxPlayers = campaign.MaxPlayers,
                Duration = campaign.DurationHours.HasValue ? TimeSpan.FromHours(campaign.DurationHours.Value) : (TimeSpan?)null,
                Tags = campaign.Tags.Select(t => t.Name).ToList(),
                IsActive = campaign.IsActive,
                HasAvailableSlots = campaign.HasAvailableSlots,
                CreatedAt = campaign.CreatedAt,
                UpdatedAt = campaign.UpdatedAt ?? campaign.CreatedAt,
                SupportedRoomTypes = campaign.Rooms.Select(r => r.Type.ToString()).Distinct().ToList()
            };
        }

        private static SlotDto MapSlotToDto(Slot slot)
        {
            var campaign = slot.Campaign ?? throw new InvalidOperationException("Slot must have a campaign reference");
            var currentPlayers = slot.Bookings.Count;
            var availableSlots = campaign.MaxPlayers - currentPlayers;

            var roomType = campaign.Rooms.FirstOrDefault()?.Type ?? RoomType.Physical;

            return new SlotDto
            {
                Id = slot.Id,
                CampaignId = slot.CampaignId,
                StartTime = slot.StartTime,
                CurrentPlayers = currentPlayers,
                AvailableSlots = availableSlots,
                IsFull = availableSlots <= 0,
                IsInPast = slot.StartTime < DateTime.UtcNow,
                RoomType = roomType
            };
        }

        // --- Вспомогательные методы ---
        private bool HasTimeConflict(DateTime startTime, TimeSpan duration, List<ConflictSlot> conflicts, Guid? excludeSlotId = null)
        {
            var endTime = startTime.Add(duration);

            return conflicts.Any(conflict =>
                conflict.Id != excludeSlotId &&
                ConflictCheckService.TimeIntervalsOverlap(startTime, endTime, conflict.StartTime, conflict.EndTime)
            );
        }
    }
}

// ===== ConflictCheckService.cs =====

using DnDAgency.Domain.Entities;
using DnDAgency.Domain.Interfaces;

namespace DnDAgency.Application.Services
{
    public class ConflictCheckService : IConflictCheckService
    {
        private readonly ICampaignRepository _campaignRepository;
        private readonly ISlotRepository _slotRepository;
        private readonly IRoomRepository _roomRepository;

        public ConflictCheckService(
            ICampaignRepository campaignRepository,
            ISlotRepository slotRepository,
            IRoomRepository roomRepository)
        {
            _campaignRepository = campaignRepository;
            _slotRepository = slotRepository;
            _roomRepository = roomRepository;
        }

        public async Task<bool> HasConflictAsync(Guid campaignId, DateTime startTime, TimeSpan duration)
        {
            var campaign = await _campaignRepository.GetByIdAsync(campaignId);
            if (campaign == null)
                throw new KeyNotFoundException("Campaign not found");

            var endTime = startTime.Add(duration);

            // Проверяем конфликты для каждого типа комнат в кампании
            foreach (var room in campaign.Rooms)
            {
                bool hasConflict = room.Type switch
                {
                    RoomType.Physical => await CheckPhysicalRoomConflictAsync(room.Id, startTime, endTime),
                    RoomType.Online => await CheckOnlineMasterConflictAsync(campaign.Masters, startTime, endTime),
                    _ => throw new ArgumentException("Unknown room type")
                };

                if (hasConflict) return true;
            }

            return false;
        }

        private async Task<bool> CheckPhysicalRoomConflictAsync(Guid roomId, DateTime startTime, DateTime endTime)
        {
            // Получаем все кампании в этой физической комнате
            var roomCampaigns = await _campaignRepository.GetByRoomIdAsync(roomId);

            foreach (var campaign in roomCampaigns)
            {
                if (!campaign.DurationHours.HasValue) continue;

                var campaignDuration = TimeSpan.FromHours(campaign.DurationHours.Value);

                // Получаем все слоты этой кампании в указанную дату
                var existingSlots = await _slotRepository.GetByCampaignAndDateAsync(campaign.Id, startTime.Date);


                foreach (var slot in existingSlots)
                {
                    // Игнорируем пустые слоты
                    if (slot.CurrentPlayers == 0)
                        continue;

                    var slotEndTime = slot.StartTime.Add(campaignDuration);

                    Console.WriteLine($"Checking slot: {slot.StartTime} vs checking time: {startTime}");

                    // Проверяем пересечение временных интервалов
                    if (TimeIntervalsOverlap(startTime, endTime, slot.StartTime, slotEndTime))
                        return true;
                }
            }

            return false;
        }

        private async Task<bool> CheckOnlineMasterConflictAsync(List<Master> masters, DateTime startTime, DateTime endTime)
        {
            if (!masters.Any())
                return true; // Нет мастеров = конфликт

            // Проверяем, есть ли хотя бы один свободный мастер
            foreach (var master in masters)
            {
                var isMasterFree = await IsMasterFreeAsync(master.Id, startTime, endTime);
                if (isMasterFree)
                    return false; // Есть свободный мастер = нет конфликта
            }

            return true; // Все мастера заняты = конфликт
        }

        private async Task<bool> IsMasterFreeAsync(Guid masterId, DateTime startTime, DateTime endTime)
        {
            // Получаем все онлайн кампании этого мастера
            var masterCampaigns = await _campaignRepository.GetOnlineCampaignsByMasterIdAsync(masterId);

            foreach (var campaign in masterCampaigns)
            {
                if (!campaign.DurationHours.HasValue) continue;

                var campaignDuration = TimeSpan.FromHours(campaign.DurationHours.Value);

                // Получаем слоты в указанную дату
                var existingSlots = await _slotRepository.GetByCampaignAndDateAsync(campaign.Id, startTime.Date);

                foreach (var slot in existingSlots)
                {
                    var slotEndTime = slot.StartTime.Add(campaignDuration);

                    // Если есть пересечение - мастер занят
                    if (TimeIntervalsOverlap(startTime, endTime, slot.StartTime, slotEndTime))
                        return false;
                }
            }

            return true; // Мастер свободен
        }

        public static bool TimeIntervalsOverlap(DateTime start1, DateTime end1, DateTime start2, DateTime end2)
        {
            return start1 < end2 && start2 < end1;
        }
    }
}

// ===== MasterService.cs =====

using DnDAgency.Application.DTOs.CampaignsDTO;
using DnDAgency.Application.DTOs.MastersDTO;
using DnDAgency.Application.DTOs.UsersDTO;
using DnDAgency.Application.Interfaces;
using DnDAgency.Domain.Entities;
using DnDAgency.Infrastructure.Interfaces;

namespace DnDAgency.Application.Services
{
    public class MasterService : IMasterService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IFileStorageService _fileStorageService;
        private readonly IUserService _userService;

        public MasterService(
            IUnitOfWork unitOfWork,
            IFileStorageService fileStorageService,
            IUserService userService)
        {
            _unitOfWork = unitOfWork;
            _fileStorageService = fileStorageService;
            _userService = userService;
        }

        public async Task<List<MasterDto>> GetAllAsync()
        {
            var masters = await _unitOfWork.Masters.GetAllAsync();
            return masters.Where(m => m.IsActive).Select(MapToDto).ToList();
        }

        public async Task<MasterDto> GetByIdAsync(Guid id)
        {
            var master = await _unitOfWork.Masters.GetByIdAsync(id);
            if (master == null || !master.IsActive)
                throw new KeyNotFoundException("Master not found");

            return MapToDto(master);
        }

        public async Task<MasterDto> CreateFromUserAsync(Guid userId, string bio)
        {
            using var transaction = await _unitOfWork.BeginTransactionAsync();
            try
            {
                var user = await _unitOfWork.Users.GetByIdAsync(userId);
                if (user == null)
                    throw new KeyNotFoundException("User not found");

                if (!user.IsMaster)
                    throw new ArgumentException("User must have Master role to create master profile");

                var allMasters = await _unitOfWork.Masters.GetAllAsync();
                if (allMasters.Any(m => m.UserId == userId))
                    throw new ArgumentException("Master profile already exists for this user");

                var master = new Master(userId, user.Username, bio);
                await _unitOfWork.Masters.AddAsync(master);
                await _unitOfWork.SaveChangesAsync();
                await _unitOfWork.CommitTransactionAsync();

                return MapToDto(master);
            }
            catch
            {
                await _unitOfWork.RollbackTransactionAsync();
                throw;
            }
        }

        public async Task<MasterDto> AdminCreateMasterAsync(AdminCreateMasterDto dto)
        {
            if (dto == null) throw new ArgumentNullException(nameof(dto));

            using var transaction = await _unitOfWork.BeginTransactionAsync();
            try
            {
                // 1. Создаём нового пользователя через IUserService
                var userDto = await _userService.CreateAsync(dto.Username, dto.Email, dto.Password);

                // 2. Получаем сущность пользователя
                var userEntity = await _unitOfWork.Users.GetByIdAsync(userDto.Id);
                if (userEntity == null)
                    throw new Exception("Failed to create user for master");

                // 3. Ставим роль Master и создаём профиль мастера
                userEntity.PromoteToMaster();
                var master = userEntity.CreateMasterProfile(dto.Bio);

                // 4. Сохраняем фото, если есть
                if (dto.Photo != null)
                {
                    var photoUrl = await _fileStorageService.SaveFileAsync(dto.Photo, "masters");
                    typeof(Master).GetProperty("PhotoUrl")?.SetValue(master, photoUrl);
                }

                // 5. Сохраняем мастер-профиль в репозитории
                await _unitOfWork.Masters.AddAsync(master);
                _unitOfWork.Users.Update(userEntity);
                await _unitOfWork.SaveChangesAsync();
                await _unitOfWork.CommitTransactionAsync();

                return MapAdminDto(master);
            }
            catch
            {
                await _unitOfWork.RollbackTransactionAsync();
                throw;
            }
        }

        public async Task<MasterDto> UpdateAsync(Guid id, UpdateMasterDto dto, Guid currentUserId)
        {
            var master = await _unitOfWork.Masters.GetByIdAsync(id);
            if (master == null)
                throw new KeyNotFoundException("Master not found");

            if (master.UserId != currentUserId)
                throw new UnauthorizedAccessException("Can only update own master profile");

            if (!string.IsNullOrEmpty(dto.Bio))
                master.UpdateBio(dto.Bio);

            if (!string.IsNullOrEmpty(dto.Name))
                master.UpdateName(dto.Name);

            _unitOfWork.Masters.Update(master);
            await _unitOfWork.SaveChangesAsync();
            return MapToDto(master);
        }

        public async Task DeactivateAsync(Guid id, Guid currentUserId)
        {
            var master = await _unitOfWork.Masters.GetByIdAsync(id);
            if (master == null)
                throw new KeyNotFoundException("Master not found");

            if (master.UserId != currentUserId)
                throw new UnauthorizedAccessException("Can only deactivate own master profile");

            master.Deactivate();
            _unitOfWork.Masters.Update(master);
            await _unitOfWork.SaveChangesAsync();
        }

        public async Task<List<CampaignDto>> GetMasterCampaignsAsync(Guid userId)
        {
            var campaigns = await _unitOfWork.Campaigns.GetByUserIdAsync(userId);
            return campaigns.Where(c => c.IsActive).Select(MapCampaignToDto).ToList();
        }

        public async Task AddCampaignToMasterAsync(Guid masterId, Guid campaignId)
        {
            using var transaction = await _unitOfWork.BeginTransactionAsync();
            try
            {
                var master = await _unitOfWork.Masters.GetByIdAsync(masterId);
                if (master == null || !master.IsActive)
                    throw new KeyNotFoundException("Master not found");

                var campaign = await _unitOfWork.Campaigns.GetByIdForUpdateAsync(campaignId);
                if (campaign == null || !campaign.IsActive)
                    throw new KeyNotFoundException("Campaign not found");

                // Проверка: не добавлена ли уже эта кампания
                if (campaign.Masters.Any(m => m.Id == master.Id))
                    throw new InvalidOperationException("Campaign is already assigned to this master");

                campaign.Masters.Add(master);
                await _unitOfWork.SaveChangesAsync();
                await _unitOfWork.CommitTransactionAsync();
            }
            catch
            {
                await _unitOfWork.RollbackTransactionAsync();
                throw;
            }
        }

        public async Task AssignCampaignsAsync(Guid userId, List<Guid> campaignIds, Guid currentUserId)
        {
            if (userId != currentUserId)
                throw new UnauthorizedAccessException("You can only assign campaigns to your own profile");

            using var transaction = await _unitOfWork.BeginTransactionAsync();
            try
            {
                // Получаем мастера с кампаниями для отслеживания
                var master = await _unitOfWork.Masters.GetByUserIdAsync(userId);
                if (master == null || !master.IsActive)
                    throw new KeyNotFoundException("Master not found");

                // Очищаем текущие связи
                master.Campaigns.Clear();

                // Добавляем только выбранные кампании
                foreach (var campaignId in campaignIds)
                {
                    var campaign = await _unitOfWork.Campaigns.GetByIdForUpdateAsync(campaignId);
                    if (campaign == null || !campaign.IsActive)
                        continue; // пропускаем несуществующие

                    master.Campaigns.Add(campaign);
                }

                await _unitOfWork.SaveChangesAsync();
                await _unitOfWork.CommitTransactionAsync();
            }
            catch
            {
                await _unitOfWork.RollbackTransactionAsync();
                throw;
            }
        }

        // --- Мапперы ---
        private static MasterDto MapToDto(Master master)
        {
            return new MasterDto
            {
                Id = master.Id,
                UserId = master.UserId,
                Name = master.Name,
                Bio = master.Bio,
                PhotoUrl = master.PhotoUrl,
                IsActive = master.IsActive,
                CampaignCount = master.Campaigns.Count(c => c.IsActive),
                AverageRating = master.Reviews.Any() ? master.Reviews.Average(r => r.Rating) : 0,
                ReviewCount = master.Reviews.Count,
                CreatedAt = master.CreatedAt,
                UpdatedAt = master.UpdatedAt
            };
        }

        private static MasterDto MapAdminDto(Master master)
        {
            return new MasterDto
            {
                Id = master.Id,
                Name = master.Name,
                Bio = master.Bio,
                PhotoUrl = master.PhotoUrl,
                IsActive = master.IsActive,
                CampaignCount = 0,
                AverageRating = 0,
                ReviewCount = 0,
                CreatedAt = master.CreatedAt,
                UpdatedAt = master.UpdatedAt
            };
        }

        private static CampaignDto MapCampaignToDto(Campaign campaign)
        {
            return new CampaignDto
            {
                Id = campaign.Id,
                Title = campaign.Title,
                Description = campaign.Description,
                MasterIds = campaign.Masters?.Select(m => m.Id).ToList() ?? new List<Guid>(),
                MasterNames = campaign.Masters?.Select(m => m.Name).ToList() ?? new List<string>(),
                Price = campaign.Price,
                IsActive = campaign.IsActive,
                HasAvailableSlots = campaign.HasAvailableSlots,
                CreatedAt = campaign.CreatedAt,
                UpdatedAt = campaign.UpdatedAt
            };
        }
    }
}

// ===== UserService.cs =====

using DnDAgency.Application.DTOs.AuthDTO;
using DnDAgency.Application.DTOs.MastersDTO;
using DnDAgency.Application.DTOs.UsersDTO;
using DnDAgency.Application.Interfaces;
using DnDAgency.Domain.Entities;
using DnDAgency.Infrastructure.Interfaces;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;

namespace DnDAgency.Application.Services
{
    public class UserService : IUserService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IConfiguration _configuration;

        public UserService(
            IUnitOfWork unitOfWork,
            IConfiguration configuration)
        {
            _unitOfWork = unitOfWork;
            _configuration = configuration;
        }

        public async Task<UserDto> CreateAsync(string username, string email, string password)
        {
            using var transaction = await _unitOfWork.BeginTransactionAsync();
            try
            {
                var existingUser = await _unitOfWork.Users.GetByEmailAsync(email);
                if (existingUser != null)
                    throw new ArgumentException("User with this email already exists");

                var hashedPassword = BCrypt.Net.BCrypt.HashPassword(password);
                var user = new User(username, email, hashedPassword);

                await _unitOfWork.Users.AddAsync(user);
                await _unitOfWork.SaveChangesAsync();
                await _unitOfWork.CommitTransactionAsync();
                
                return MapToDto(user);
            }
            catch
            {
                await _unitOfWork.RollbackTransactionAsync();
                throw;
            }
        }

        public async Task<List<UserDto>> GetAllAsync()
        {
            var users = await _unitOfWork.Users.GetAllAsync();
            return users.Where(u => u.IsActive).Select(MapToDto).ToList();
        }

        public async Task<UserDto> GetByIdAsync(Guid id)
        {
            var user = await _unitOfWork.Users.GetByIdAsync(id);
            if (user == null || !user.IsActive)
                throw new KeyNotFoundException("User not found");

            return MapToDto(user);
        }

        public async Task<UserDto> UpdateAsync(Guid id, UpdateUserDto dto, Guid currentUserId)
        {
            using var transaction = await _unitOfWork.BeginTransactionAsync();
            try
            {
                var user = await _unitOfWork.Users.GetByIdAsync(id);
                if (user == null)
                    throw new KeyNotFoundException("User not found");

                if (id != currentUserId)
                    throw new UnauthorizedAccessException("You can only update your own profile");

                if (!string.IsNullOrEmpty(dto.Username))
                    user.UpdateUsername(dto.Username);

                if (!string.IsNullOrEmpty(dto.Email))
                {
                    var existingUser = await _unitOfWork.Users.GetByEmailAsync(dto.Email);
                    if (existingUser != null && existingUser.Id != id)
                        throw new ArgumentException("Email is already in use");

                    user.UpdateEmail(dto.Email);
                }

                _unitOfWork.Users.Update(user);
                await _unitOfWork.SaveChangesAsync();
                await _unitOfWork.CommitTransactionAsync();
                
                return MapToDto(user);
            }
            catch
            {
                await _unitOfWork.RollbackTransactionAsync();
                throw;
            }
        }

        public async Task<AuthResponseDto> AuthenticateAsync(string email, string password)
        {
            using var transaction = await _unitOfWork.BeginTransactionAsync();
            try
            {
                var user = await _unitOfWork.Users.GetByEmailAsync(email);
                if (user == null || !user.IsActive || !BCrypt.Net.BCrypt.Verify(password, user.PasswordHash))
                    throw new UnauthorizedAccessException("Invalid credentials");

                var accessToken = GenerateJwtToken(user);
                var refreshToken = GenerateRefreshToken(user.Id);

                await _unitOfWork.RefreshTokens.AddAsync(refreshToken);
                await _unitOfWork.SaveChangesAsync();
                await _unitOfWork.CommitTransactionAsync();

                return new AuthResponseDto
                {
                    Token = accessToken,
                    RefreshToken = refreshToken.Token,
                    User = MapToDto(user),
                    Expires = DateTime.UtcNow.AddMinutes(int.Parse(_configuration["JwtSettings:ExpiryMinutes"]!))
                };
            }
            catch
            {
                await _unitOfWork.RollbackTransactionAsync();
                throw;
            }
        }

        public async Task<AuthResponseDto> RefreshTokenAsync(string token)
        {
            using var transaction = await _unitOfWork.BeginTransactionAsync();
            try
            {
                var refreshToken = await _unitOfWork.RefreshTokens.GetByTokenAsync(token);
                if (refreshToken == null || !refreshToken.IsActive)
                    throw new UnauthorizedAccessException("Invalid or inactive refresh token");

                // деактивируем старый
                refreshToken.Revoke();
                _unitOfWork.RefreshTokens.Update(refreshToken);

                var user = await _unitOfWork.Users.GetByIdAsync(refreshToken.UserId);
                if (user == null || !user.IsActive)
                    throw new UnauthorizedAccessException("User not found");

                var newAccessToken = GenerateJwtToken(user);
                var newRefreshToken = GenerateRefreshToken(user.Id);

                await _unitOfWork.RefreshTokens.AddAsync(newRefreshToken);
                await _unitOfWork.SaveChangesAsync();
                await _unitOfWork.CommitTransactionAsync();

                return new AuthResponseDto
                {
                    Token = newAccessToken,
                    RefreshToken = newRefreshToken.Token,
                    User = MapToDto(user),
                    Expires = DateTime.UtcNow.AddMinutes(int.Parse(_configuration["JwtSettings:ExpiryMinutes"]!))
                };
            }
            catch
            {
                await _unitOfWork.RollbackTransactionAsync();
                throw;
            }
        }

        public async Task ChangePasswordAsync(Guid userId, ChangePasswordDto dto)
        {
            var user = await _unitOfWork.Users.GetByIdAsync(userId);
            if (user == null)
                throw new KeyNotFoundException("User not found");

            if (!BCrypt.Net.BCrypt.Verify(dto.CurrentPassword, user.PasswordHash))
                throw new UnauthorizedAccessException("Current password is incorrect");

            var newHashedPassword = BCrypt.Net.BCrypt.HashPassword(dto.NewPassword);
            user.UpdatePassword(newHashedPassword);

            _unitOfWork.Users.Update(user);
            await _unitOfWork.SaveChangesAsync();
        }

        public async Task DeactivateAsync(Guid id, Guid currentUserId)
        {
            var user = await _unitOfWork.Users.GetByIdAsync(id);
            if (user == null)
                throw new KeyNotFoundException("User not found");

            if (id != currentUserId)
                throw new UnauthorizedAccessException("You can only deactivate your own account");

            user.Deactivate();
            _unitOfWork.Users.Update(user);
            await _unitOfWork.SaveChangesAsync();
        }

        private string GenerateJwtToken(User user)
        {
            var tokenHandler = new JwtSecurityTokenHandler();
            var key = Encoding.ASCII.GetBytes(_configuration["JwtSettings:Key"]!);
            var expiresMinutes = int.Parse(_configuration["JwtSettings:ExpiryMinutes"]!);

            var claims = new List<Claim>
            {
                new(ClaimTypes.NameIdentifier, user.Id.ToString()),
                new(ClaimTypes.Name, user.Username),
                new(ClaimTypes.Email, user.Email),
                new(ClaimTypes.Role, user.Role.ToString())
            };

            var tokenDescriptor = new SecurityTokenDescriptor
            {
                Subject = new ClaimsIdentity(claims),
                Expires = DateTime.UtcNow.AddMinutes(expiresMinutes),
                Issuer = _configuration["JwtSettings:Issuer"],
                Audience = _configuration["JwtSettings:Audience"],
                SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
            };

            var token = tokenHandler.CreateToken(tokenDescriptor);
            return tokenHandler.WriteToken(token);
        }

        private static RefreshToken GenerateRefreshToken(Guid userId)
        {
            var randomBytes = RandomNumberGenerator.GetBytes(64);
            var token = Convert.ToBase64String(randomBytes);

            return new RefreshToken(
                token: token,
                expires: DateTime.UtcNow.AddDays(7),
                userId: userId
            );
        }

        private static UserDto MapToDto(User user)
        {
            return new UserDto
            {
                Id = user.Id,
                Username = user.Username,
                Email = user.Email,
                Role = user.Role.ToString(),
                IsMaster = user.IsMaster,
                IsAdmin = user.IsAdmin,
                IsActive = user.IsActive,
                CreatedAt = user.CreatedAt,
                UpdatedAt = user.UpdatedAt,
                MasterProfile = user.MasterProfile != null ? MapMasterToDto(user.MasterProfile) : null
            };
        }

        private static MasterDto MapMasterToDto(Master master)
        {
            return new MasterDto
            {
                Id = master.Id,
                UserId = master.UserId,
                Name = master.Name,
                Bio = master.Bio,
                IsActive = master.IsActive,
                CampaignCount = master.Campaigns.Count(c => c.IsActive),
                AverageRating = master.Reviews.Any() ? master.Reviews.Average(r => r.Rating) : 0,
                ReviewCount = master.Reviews.Count,
                CreatedAt = master.CreatedAt,
                UpdatedAt = master.UpdatedAt
            };
        }
    }
}

// ===== Booking.cs =====

namespace DnDAgency.Domain.Entities
{
    public class Booking
    {
        public Guid Id { get; private set; } = Guid.NewGuid();
        public Guid UserId { get; private set; }
        public User User { get; private set; }
        public Guid SlotId { get; private set; }
        public Slot Slot { get; private set; }
        public int PlayersCount { get; private set; }
        public DateTime CreatedAt { get; private set; } = DateTime.UtcNow;

        private Booking() { } // EF Core

        public Booking(Guid userId, Guid slotId, int playersCount = 1)
        {
            ValidatePlayersCount(playersCount);

            UserId = userId;
            SlotId = slotId;
            PlayersCount = playersCount;
        }

        public void UpdatePlayersCount(int playersCount)
        {
            ValidatePlayersCount(playersCount);
            PlayersCount = playersCount;
        }

        private static void ValidatePlayersCount(int playersCount)
        {
            if (playersCount < 1)
                throw new ArgumentException("Players count must be at least 1");
            if (playersCount > 8)
                throw new ArgumentException("Players count cannot exceed 8");
        }
    }
}

// ===== Campaign.cs =====

namespace DnDAgency.Domain.Entities
{
    public class Campaign
    {
        public Guid Id { get; private set; } = Guid.NewGuid();
        public List<Room> Rooms { get; private set; } = new();
        public List<Master> Masters { get; private set; } = new();
        public string Title { get; private set; }
        public string Description { get; private set; }
        
        public decimal Price { get; private set; }

        public string ImageUrl { get; private set; }
        public int Level { get; private set; } // 1–20
        public int MaxPlayers { get; private set; } // 1–8
        public double? DurationHours { get; private set; } 

        public List<CampaignTag> Tags { get; private set; } = new();
        public List<Slot> Slots { get; private set; } = new();

        public DateTime CreatedAt { get; private set; } = DateTime.UtcNow;
        public DateTime? UpdatedAt { get; private set; }
        public bool IsActive { get; private set; } = true;

        public TimeSpan WorkingHoursStart { get; private set; } = new TimeSpan(10, 0, 0); // 10:00
        public TimeSpan WorkingHoursEnd { get; private set; } = new TimeSpan(21, 0, 0); // 21:00  

        public bool HasAvailableSlots => Slots.Any(s => s.CanBeBooked(MaxPlayers));

        

        private Campaign() { } // EF Core

        public Campaign(
        string title,
        string description,
        decimal price,
        string imageUrl,
        int level,
        List<Room> rooms,
        int maxPlayers = 8,
        double? durationHours = null,
        List<Master>? masters = null)
            {
                ValidateTitle(title);
                ValidateDescription(description);
                ValidatePrice(price);
                ValidateImageUrl(imageUrl);
                ValidateLevel(level);
                ValidateMaxPlayers(maxPlayers);

                Title = title;
                Description = description;
                Price = price;
                ImageUrl = imageUrl;
                Level = level;
                Rooms = rooms ?? new List<Room>();
                MaxPlayers = maxPlayers;
                DurationHours = durationHours;

            Masters = masters ?? new List<Master>();
            }


        public void Update(
            string title,
            string description,
            decimal price,
            string imageUrl,
            int level,
            int maxPlayers,
            int? durationHours)
        {
            UpdateTitle(title);
            UpdateDescription(description);
            UpdatePrice(price);
            UpdateImageUrl(imageUrl);
            UpdateLevel(level);
            UpdateMaxPlayers(maxPlayers);
            UpdateDuration(durationHours);
        }

        public void UpdateTitle(string title)
        {
            ValidateTitle(title);
            Title = title;
            UpdatedAt = DateTime.UtcNow;
        }

        public void UpdateDescription(string description)
        {
            ValidateDescription(description);
            Description = description;
            UpdatedAt = DateTime.UtcNow;
        }

        public void UpdatePrice(decimal price)
        {
            ValidatePrice(price);
            Price = price;
            UpdatedAt = DateTime.UtcNow;
        }

        public void UpdateImageUrl(string imageUrl)
        {
            ValidateImageUrl(imageUrl);
            ImageUrl = imageUrl;
            UpdatedAt = DateTime.UtcNow;
        }

        public void UpdateLevel(int level)
        {
            ValidateLevel(level);
            Level = level;
            UpdatedAt = DateTime.UtcNow;
        }

        public void UpdateMaxPlayers(int maxPlayers)
        {
            ValidateMaxPlayers(maxPlayers);
            MaxPlayers = maxPlayers;
            UpdatedAt = DateTime.UtcNow;
        }

        public void UpdateDuration(int? durationHours)
        {
            if (durationHours.HasValue && durationHours <= 0)
                throw new ArgumentException("Duration must be positive hours or null");
            DurationHours = durationHours;
            UpdatedAt = DateTime.UtcNow;
        }

        public void Deactivate()
        {
            IsActive = false;
            UpdatedAt = DateTime.UtcNow;
        }

        public void Activate()
        {
            IsActive = true;
            UpdatedAt = DateTime.UtcNow;
        }


        // === Validators ===
        private static void ValidateTitle(string title)
        {
            if (string.IsNullOrWhiteSpace(title))
                throw new ArgumentException("Title cannot be empty");
            if (title.Length > 100)
                throw new ArgumentException("Title cannot exceed 100 characters");
        }

        private static void ValidateDescription(string description)
        {
            if (string.IsNullOrWhiteSpace(description))
                throw new ArgumentException("Description cannot be empty");
            if (description.Length > 1000)
                throw new ArgumentException("Description cannot exceed 1000 characters");
        }

        private static void ValidatePrice(decimal price)
        {
            if (price < 0)
                throw new ArgumentException("Price cannot be negative");
            if (price > 99999)
                throw new ArgumentException("Price cannot exceed 99999");
        }

        private static void ValidateImageUrl(string imageUrl)
        {
            if (string.IsNullOrWhiteSpace(imageUrl))
                throw new ArgumentException("ImageUrl cannot be empty");
            if (imageUrl.Length > 500)
                throw new ArgumentException("ImageUrl cannot exceed 500 characters");
        }

        private static void ValidateLevel(int level)
        {
            if (level < 1 || level > 20)
                throw new ArgumentException("Level must be between 1 and 20");
        }

        private static void ValidateMaxPlayers(int maxPlayers)
        {
            if (maxPlayers < 1 || maxPlayers > 8)
                throw new ArgumentException("MaxPlayers must be between 1 and 8");
        }

        public TimeSpan GetMaxStartTime()
        {
            if (!DurationHours.HasValue)
                throw new InvalidOperationException("DurationHours is not set.");

            return WorkingHoursEnd.Subtract(TimeSpan.FromHours(DurationHours.Value));
        }

        public bool SupportsRoomType(RoomType roomType) =>
        Rooms.Any(r => r.Type == roomType);

    }
}

// ===== CampaignTag.cs =====

namespace DnDAgency.Domain.Entities
{
    public class CampaignTag
    {
        public Guid Id { get; private set; } = Guid.NewGuid();
        public string Name { get; private set; }

        public Guid CampaignId { get; private set; }
        public Campaign Campaign { get; private set; }

        private CampaignTag() { } // EF Core

        public CampaignTag(string name, Guid campaignId)
        {
            ValidateName(name);

            Name = name;
            CampaignId = campaignId;
        }

        private static void ValidateName(string name)
        {
            if (string.IsNullOrWhiteSpace(name))
                throw new ArgumentException("Tag name cannot be empty");
            if (name.Length > 50)
                throw new ArgumentException("Tag name cannot exceed 50 characters");
        }
    }
}

// ===== ConflictSlot.cs =====

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Domain.Entities
{
    public class ConflictSlot
    {
        public Guid Id { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public Guid CampaignId { get; set; }
    }
}

// ===== Master.cs =====

namespace DnDAgency.Domain.Entities
{
    public class Master
    {
        public Guid Id { get; private set; } = Guid.NewGuid();
        public Guid UserId { get; private set; }
        public User User { get; private set; }
        public string Name { get; private set; }
        public string Bio { get; private set; }
        public bool IsActive { get; private set; } = true;
        public string PhotoUrl { get; private set; }
        public DateTime CreatedAt { get; private set; } = DateTime.UtcNow;
        public DateTime? UpdatedAt { get; private set; }

        public List<Campaign> Campaigns { get; private set; } = new();
        public List<Review> Reviews { get; private set; } = new();

        // Для Entity Framework
        private Master() { }

        // ИСПРАВЛЕННЫЙ конструктор
        public Master(Guid userId, string name, string bio)
        {
            ValidateName(name);
            ValidateBio(bio);

            UserId = userId;
            Name = name;
            Bio = bio;
        }

        public void UpdateBio(string bio)
        {
            ValidateBio(bio);
            Bio = bio;
            UpdatedAt = DateTime.UtcNow;
        }

        public void UpdateName(string name)
        {
            ValidateName(name);
            Name = name;
            UpdatedAt = DateTime.UtcNow;
        }

        public void Deactivate()
        {
            IsActive = false;
            UpdatedAt = DateTime.UtcNow;
        }

        public void Activate()
        {
            IsActive = true;
            UpdatedAt = DateTime.UtcNow;
        }

        private static void ValidateName(string name)
        {
            if (string.IsNullOrWhiteSpace(name))
                throw new ArgumentException("Name cannot be empty");
            if (name.Length > 100)
                throw new ArgumentException("Name cannot exceed 100 characters");
        }

        private static void ValidateBio(string bio)
        {
            if (string.IsNullOrWhiteSpace(bio))
                throw new ArgumentException("Bio cannot be empty");
            if (bio.Length > 2000)
                throw new ArgumentException("Bio cannot exceed 2000 characters");
        }
    }
}

// ===== RefreshToken.cs =====

namespace DnDAgency.Domain.Entities
{
    public class RefreshToken
    {
        public Guid Id { get; private set; } = Guid.NewGuid();
        public string Token { get; private set; }
        public DateTime Expires { get; private set; }
        public DateTime Created { get; private set; } = DateTime.UtcNow;
        public DateTime? Revoked { get; private set; }

        public bool IsExpired => DateTime.UtcNow >= Expires;
        public bool IsActive => Revoked == null && !IsExpired;

        public Guid UserId { get; private set; }
        public User User { get; private set; }

        private RefreshToken() { } // EF Core

        public RefreshToken(string token, DateTime expires, Guid userId)
        {
            Token = token;
            Expires = expires;
            UserId = userId;
        }

        public void Revoke()
        {
            Revoked = DateTime.UtcNow;
        }
    }
}

// ===== Review.cs =====

using DnDAgency.Domain.Exceptions;

namespace DnDAgency.Domain.Entities
{
    public class Review
    {
        public Guid Id { get; private set; } = Guid.NewGuid();
        public Guid UserId { get; private set; }
        public User User { get; private set; }
        public Guid MasterId { get; private set; }
        public Master Master { get; private set; }
        public int Rating { get; private set; }
        public string Comment { get; private set; }
        public DateTime CreatedAt { get; private set; } = DateTime.UtcNow;

        public Review(Guid userId, Guid masterId, int rating, string comment)
        {
            ValidateRating(rating);
            ValidateComment(comment);

            UserId = userId;
            MasterId = masterId;
            Rating = rating;
            Comment = comment;
        }

        public void UpdateRating(int rating)
        {
            ValidateRating(rating);
            Rating = rating;
        }

        public void UpdateComment(string comment)
        {
            ValidateComment(comment);
            Comment = comment;
        }

        private static void ValidateRating(int rating)
        {
            if (rating < 1 || rating > 5)
                throw new InvalidRatingException(rating);
        }

        private static void ValidateComment(string comment)
        {
            if (string.IsNullOrWhiteSpace(comment))
                throw new ArgumentException("Comment cannot be empty");
            if (comment.Length > 1000)
                throw new ArgumentException("Comment cannot exceed 1000 characters");
        }
    }
}

// ===== Room.cs =====

namespace DnDAgency.Domain.Entities
{
    public class Room
    {
        public Guid Id { get; private set; } = Guid.NewGuid();
        public List<Campaign> Campaigns { get; private set; } = new();
        public string Name { get; private set; }
        public RoomType Type { get; private set; }
        public int? Capacity { get; private set; } // Null для Online
        public bool IsActive { get; private set; } = true;
        public DateTime CreatedAt { get; private set; } = DateTime.UtcNow;



        private Room() { } // EF Core

        public Room(string name, RoomType type, int? capacity = null)
        {
            ValidateName(name);
            ValidateCapacity(type, capacity);

            Name = name;
            Type = type;
            Capacity = capacity;
        }

        public void UpdateName(string name)
        {
            ValidateName(name);
            Name = name;
        }

        public void UpdateCapacity(int? capacity)
        {
            ValidateCapacity(Type, capacity);
            Capacity = capacity;
        }

        public void Deactivate() => IsActive = false;
        public void Activate() => IsActive = true;

        private static void ValidateName(string name)
        {
            if (string.IsNullOrWhiteSpace(name))
                throw new ArgumentException("Room name cannot be empty");
            if (name.Length > 100)
                throw new ArgumentException("Room name cannot exceed 100 characters");
        }

        private static void ValidateCapacity(RoomType type, int? capacity)
        {
            if (type == RoomType.Physical && (!capacity.HasValue || capacity <= 0))
                throw new ArgumentException("Physical room must have positive capacity");

            if (type == RoomType.Online && capacity.HasValue)
                throw new ArgumentException("Online room should not have capacity limit");
        }
    }
}

public enum RoomType
{
    Physical = 0,
    Online = 1
}

// ===== Slot.cs =====

using DnDAgency.Domain.Exceptions;

namespace DnDAgency.Domain.Entities
{
    public class Slot
    {
        public Guid Id { get; private set; } = Guid.NewGuid();
        public Guid CampaignId { get; private set; }
        public Campaign Campaign { get; private set; }
        public DateTime StartTime { get; private set; }

        public List<Booking> Bookings { get; private set; } = new();

        public int CurrentPlayers => Bookings.Sum(b => b.PlayersCount);
        public int AvailableSlots => Campaign.MaxPlayers - CurrentPlayers;
        public bool IsFull => AvailableSlots <= 0;
        public bool IsInPast => StartTime < DateTime.UtcNow;

        private Slot() { } // EF Core

        public Slot(Guid campaignId, DateTime startTime)
        {
            if (startTime < DateTime.UtcNow)
                throw new PastSlotBookingException();

            CampaignId = campaignId;
            StartTime = startTime;
        }

        public void UpdateStartTime(DateTime startTime)
        {
            ValidateStartTime(startTime, Campaign);
            StartTime = startTime;
        }

        public bool CanBeBooked(int maxPlayers)
        {
            return !IsInPast && CurrentPlayers < maxPlayers;
        }

        private static void ValidateStartTime(DateTime startTime, Campaign campaign)
        {
            if (startTime < DateTime.UtcNow)
                throw new PastSlotBookingException();

            var timeOfDay = startTime.TimeOfDay;
            
            if (timeOfDay < campaign.WorkingHoursStart)
                throw new ArgumentException($"Start time cannot be earlier than {campaign.WorkingHoursStart}");
            
            if (timeOfDay > campaign.GetMaxStartTime())
                throw new ArgumentException($"Start time cannot be later than {campaign.GetMaxStartTime()}");
        }
    }
}

// ===== User.cs =====

using DnDAgency.Domain.Enums;

namespace DnDAgency.Domain.Entities
{
    public class User
    {
        public Guid Id { get; private set; } = Guid.NewGuid();
        public string Username { get; private set; }
        public string Email { get; private set; }
        public string PasswordHash { get; private set; }
        public DateTime CreatedAt { get; private set; } = DateTime.UtcNow;
        public DateTime? UpdatedAt { get; private set; }
        public bool IsActive { get; private set; } = true;
        public UserRole Role { get; private set; } = UserRole.Player;

        // Профиль мастера (если есть)
        public Master? MasterProfile { get; private set; }

        public List<Booking> Bookings { get; private set; } = new();

        public ICollection<RefreshToken> RefreshTokens { get; set; } = new List<RefreshToken>();



        public User(string username, string email, string passwordHash)
        {
            ValidateUsername(username);
            ValidateEmail(email);
            ValidatePasswordHash(passwordHash);

            Username = username;
            Email = email;
            PasswordHash = passwordHash;
            RefreshTokens = new List<RefreshToken>();
        }

        public void UpdateUsername(string username)
        {
            ValidateUsername(username);
            Username = username;
            UpdatedAt = DateTime.UtcNow;
        }

        public void UpdateEmail(string email)
        {
            ValidateEmail(email);
            Email = email;
            UpdatedAt = DateTime.UtcNow;
        }

        public void UpdatePassword(string passwordHash)
        {
            ValidatePasswordHash(passwordHash);
            PasswordHash = passwordHash;
            UpdatedAt = DateTime.UtcNow;
        }

        public void PromoteToMaster()
        {
            if (Role != UserRole.Player)
                throw new InvalidOperationException($"Cannot promote user with role {Role} to Master");
            Role = UserRole.Master;
            UpdatedAt = DateTime.UtcNow;
        }

        public void PromoteToAdmin()
        {
            Role = UserRole.Admin;
            UpdatedAt = DateTime.UtcNow;
        }

        public void DemoteToPlayer()
        {
            if (Role == UserRole.Admin)
                throw new InvalidOperationException("Cannot demote Admin to Player directly");
            Role = UserRole.Player;
            UpdatedAt = DateTime.UtcNow;
        }

        public Master CreateMasterProfile(string bio)
        {
            if (MasterProfile != null)
                throw new InvalidOperationException("Master profile already exists");

            if (Role != UserRole.Master && Role != UserRole.Admin)
                throw new InvalidOperationException("User must have Master or Admin role");

            MasterProfile = new Master(Id, Username, bio);
            UpdatedAt = DateTime.UtcNow;
            return MasterProfile;
        }

        public bool IsMaster => Role == UserRole.Master || Role == UserRole.Admin;
        public bool IsAdmin => Role == UserRole.Admin;

        public void Deactivate()
        {
            IsActive = false;
            UpdatedAt = DateTime.UtcNow;
        }

        public void Activate()
        {
            IsActive = true;
            UpdatedAt = DateTime.UtcNow;
        }

        private static void ValidateUsername(string username)
        {
            if (string.IsNullOrWhiteSpace(username))
                throw new ArgumentException("Username cannot be empty");
            if (username.Length < 3 || username.Length > 50)
                throw new ArgumentException("Username must be between 3 and 50 characters");
            if (!System.Text.RegularExpressions.Regex.IsMatch(username, @"^[a-zA-Z0-9_-]+$"))
                throw new ArgumentException("Username can only contain letters, numbers, underscores and hyphens");
        }

        private static void ValidateEmail(string email)
        {
            if (string.IsNullOrWhiteSpace(email))
                throw new ArgumentException("Email cannot be empty");
            if (!System.Text.RegularExpressions.Regex.IsMatch(email, @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
                throw new ArgumentException("Invalid email format");
            if (email.Length > 100)
                throw new ArgumentException("Email cannot exceed 100 characters");
        }

        private static void ValidatePasswordHash(string passwordHash)
        {
            if (string.IsNullOrWhiteSpace(passwordHash))
                throw new ArgumentException("Password hash cannot be empty");
        }
    }
}

// ===== UserRole.cs =====

namespace DnDAgency.Domain.Enums
{
    public enum UserRole
    {
        Player = 0,
        Master = 1,
        Admin = 2
    }
}

// ===== DomainEvent.cs =====

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Domain.Events
{
    internal class DomainEvent
    {
    }
}

// ===== DomainException.cs =====

namespace DnDAgency.Domain.Exceptions;

public abstract class DomainException : Exception
{
    protected DomainException(string message) : base(message) { }
    protected DomainException(string message, Exception innerException) : base(message, innerException) { }
}

// ===== InvalidRatingException.cs =====

namespace DnDAgency.Domain.Exceptions;

public class InvalidRatingException : DomainException
{
    public InvalidRatingException(int rating) : base($"Rating must be between 1 and 5, but was {rating}") { }
}

// ===== InvalidSlotCapacityException.cs =====

namespace DnDAgency.Domain.Exceptions;

public class InvalidSlotCapacityException : DomainException
{
    public InvalidSlotCapacityException(int maxPlayers)
        : base($"Slot capacity must be between 1 and 8, but was {maxPlayers}") { }
}

// ===== PastSlotBookingException.cs =====

namespace DnDAgency.Domain.Exceptions;

public class PastSlotBookingException : DomainException
{
    public PastSlotBookingException() : base("Cannot book slot in the past") { }
}

// ===== SlotFullException.cs =====

namespace DnDAgency.Domain.Exceptions;

public class SlotFullException : DomainException
{
    public SlotFullException() : base("Cannot book slot - maximum capacity reached") { }
}

// ===== IBookingRepository.cs =====

using DnDAgency.Domain.Entities;

namespace DnDAgency.Domain.Interfaces;

public interface IBookingRepository : IRepository<Booking>
{
    Task<List<Booking>> GetByUserIdAsync(Guid userId);
    Task<Booking?> GetByUserAndSlotAsync(Guid userId, Guid slotId);
    Task<List<Booking>> GetBySlotIdAsync(Guid slotId);
}

// ===== ICampaignRepository.cs =====

using DnDAgency.Domain.Entities;

namespace DnDAgency.Domain.Interfaces;

public interface ICampaignRepository : IRepository<Campaign>
{
    Task UpdateCampaignTagsAsync(Guid campaignId, List<string> tagNames);
    Task<Campaign?> GetByIdForUpdateAsync(Guid id);
    Task<List<Campaign>> GetActiveCampaignsAsync();
    Task<List<Campaign>> GetByMasterIdAsync(Guid masterId);
    Task<List<Campaign>> GetByUserIdAsync(Guid userId);
    Task<List<Campaign>> GetCampaignCatalogAsync();
    Task<List<Campaign>> GetByRoomIdAsync(Guid roomId);
    Task<List<Campaign>> GetOnlineCampaignsByMasterIdAsync(Guid masterId);
    Task<Campaign?> GetByIdWithSlotsAsync(Guid id);
    Task<List<Master>> GetMastersByIdsAsync(List<Guid> masterIds);
    Task<List<Room>> GetRoomsByIdsAsync(List<Guid> roomIds);
    Task<List<Room>> GetRoomsByTypesAsync(List<string> roomTypes);
    Task UpdateCampaignRoomsAsync(Guid campaignId, List<Guid> roomIds);
}

// ===== IMasterRepository.cs =====

using DnDAgency.Domain.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Domain.Interfaces
{
    public interface IMasterRepository : IRepository<Master>
    {
        Task<Master?> GetByUserIdAsync(Guid userId);
    }

}

// ===== IRefreshTokenRepository.cs =====

using DnDAgency.Domain.Entities;
using DnDAgency.Domain.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Application.Interfaces
{
    public interface IRefreshTokenRepository : IRepository<RefreshToken>
    {
        Task<RefreshToken?> GetByTokenAsync(string token);
    }

}

// ===== IRepository.cs =====

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Domain.Interfaces
{
    public interface IRepository<T> where T : class
    {
        Task<T?> GetByIdAsync(Guid id); 
        Task<List<T>> GetAllAsync();
        Task AddAsync(T entity);
        void Update(T entity);
        void Delete(T entity);
    }
}

// ===== IRoomRepository.cs =====

using DnDAgency.Domain.Entities;
using DnDAgency.Domain.Interfaces;


namespace DnDAgency.Domain.Interfaces
{
    public interface IRoomRepository : IRepository<Room>
    {
        Task<List<Room>> GetActiveRoomsAsync();
        Task<Room?> GetByNameAsync(string name);
    }
}

// ===== ISlotRepository.cs =====

using DnDAgency.Domain.Entities;

namespace DnDAgency.Domain.Interfaces;

public interface ISlotRepository : IRepository<Slot>
{
    Task<List<Slot>> GetByCampaignIdAsync(Guid campaignId);
    Task<List<Slot>> GetAvailableSlotsByCampaignIdAsync(Guid campaignId);
    Task<List<Slot>> GetUserSlotsAsync(Guid userId);
    Task<List<Slot>> GetUpcomingSlotsAsync();
    Task<List<Guid>> GetCampaignIdsWithAvailableSlotsAsync(List<Guid> campaignIds);
    Task<Slot?> GetByCampaignAndTimeAsync(Guid campaignId, DateTime startTime);
    Task<List<Slot>> GetByCampaignAndDateAsync(Guid campaignId, DateTime date);
    Task<List<ConflictSlot>> GetBookedSlotsForRoomAndDateAsync(Guid roomId, DateTime date);
    Task<Dictionary<Guid, int>> GetPlayersCountForSlotsAsync(List<Guid> slotIds);
}

// ===== IUserRepository.cs =====

using DnDAgency.Domain.Entities;

namespace DnDAgency.Domain.Interfaces;

public interface IUserRepository : IRepository<User>
{
    Task<User?> GetByEmailAsync(string email);

}

// ===== .NETCoreApp,Version=v8.0.AssemblyAttributes.cs =====

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

// ===== DnDAgency.Domain.AssemblyInfo.cs =====

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DnDAgency.Domain")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+a3c8c3daeb4d511b779d3bbcd98331fd40711d33")]
[assembly: System.Reflection.AssemblyProductAttribute("DnDAgency.Domain")]
[assembly: System.Reflection.AssemblyTitleAttribute("DnDAgency.Domain")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// ===== DnDAgency.Domain.GlobalUsings.g.cs =====

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// ===== Email.cs =====

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Domain.ValueObjects
{
    public class Email
    {
        public string Value { get; private set; }

        public Email(string value)
        {
            if (string.IsNullOrWhiteSpace(value) || !value.Contains("@"))
                throw new ArgumentException("Invalid email", nameof(value));
            Value = value;
        }
    }
}

// ===== BookingConfig.cs =====

using DnDAgency.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace DnDAgency.Infrastructure.Configurations;

public class BookingConfig : IEntityTypeConfiguration<Booking>
{
    public void Configure(EntityTypeBuilder<Booking> builder)
    {
        builder.HasKey(b => b.Id);
        builder.Property(b => b.CreatedAt).IsRequired();

        builder.HasOne(b => b.User)
               .WithMany(u => u.Bookings)
               .HasForeignKey(b => b.UserId)
               .OnDelete(DeleteBehavior.Cascade);

        builder.HasOne(b => b.Slot)
               .WithMany(s => s.Bookings)
               .HasForeignKey(b => b.SlotId)
               .OnDelete(DeleteBehavior.Cascade);

        // Уникальный индекс - один пользователь не может забронировать один слот дважды
        builder.HasIndex(b => new { b.UserId, b.SlotId }).IsUnique();

        // Индекс для быстрого поиска бронирований по дате
        builder.HasIndex(b => b.CreatedAt);
    }
}

// ===== CampaignConfig.cs =====

using DnDAgency.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace DnDAgency.Infrastructure.Configurations;

public class CampaignConfig : IEntityTypeConfiguration<Campaign>
{
    public void Configure(EntityTypeBuilder<Campaign> builder)
    {
        builder.HasKey(c => c.Id);

        builder.Property(c => c.Title)
               .IsRequired()
               .HasMaxLength(100);

        builder.Property(c => c.Description)
               .HasMaxLength(1000);

        builder.Property(c => c.Price)
               .HasPrecision(18, 2);

        builder.Property(c => c.ImageUrl)
               .HasMaxLength(500);

        builder.Property(c => c.Level)
               .IsRequired();

        builder.Property(c => c.MaxPlayers)
               .IsRequired();

        builder.Property(c => c.DurationHours);

        builder.Property(c => c.IsActive)
               .IsRequired();

        // Связь многие-ко-многим с Master
        builder.HasMany(c => c.Masters)
               .WithMany(m => m.Campaigns);

        // Связь с Slots
        builder.HasMany(c => c.Slots)
               .WithOne(s => s.Campaign)
               .HasForeignKey(s => s.CampaignId)
               .OnDelete(DeleteBehavior.Cascade);

        // Связь с Tags
        builder.HasMany(c => c.Tags)
               .WithOne(t => t.Campaign)
               .HasForeignKey(t => t.CampaignId)
               .OnDelete(DeleteBehavior.Cascade);

        // Связь многие-ко-многим с Room
        builder.HasMany(c => c.Rooms)
               .WithMany(r => r.Campaigns);
               
    }
}

// ===== MasterConfig.cs =====

using DnDAgency.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace DnDAgency.Infrastructure.Configurations
{
    public class MasterConfig : IEntityTypeConfiguration<Master>
    {
        public void Configure(EntityTypeBuilder<Master> builder)
        {
            builder.HasKey(m => m.Id);

            builder.Property(m => m.Name)
                   .IsRequired()
                   .HasMaxLength(100);

            builder.Property(m => m.Bio)
                   .IsRequired()
                   .HasMaxLength(2000);

            builder.Property(m => m.UserId)
                   .IsRequired();

            // Связь один к одному с User
            builder.HasOne(m => m.User)
                   .WithOne(u => u.MasterProfile)
                   .HasForeignKey<Master>(m => m.UserId)
                   .OnDelete(DeleteBehavior.Cascade);

            // Связь многие-ко-многим с Campaign
            builder.HasMany(m => m.Campaigns)
                   .WithMany(c => c.Masters)
                   .UsingEntity<Dictionary<string, object>>(
                       "CampaignMaster",
                       j => j.HasOne<Campaign>()
                             .WithMany()
                             .HasForeignKey("CampaignId")
                             .OnDelete(DeleteBehavior.Cascade),
                       j => j.HasOne<Master>()
                             .WithMany()
                             .HasForeignKey("MasterId")
                             .OnDelete(DeleteBehavior.Cascade),
                       j =>
                       {
                           j.HasKey("CampaignId", "MasterId");
                       });

            builder.HasMany(m => m.Reviews)
                   .WithOne(r => r.Master)
                   .HasForeignKey(r => r.MasterId)
                   .OnDelete(DeleteBehavior.Cascade);

            // Уникальный индекс на UserId
            builder.HasIndex(m => m.UserId).IsUnique();
        }
    }
}

// ===== RefreshTokenConfig.cs =====

using DnDAgency.Domain.Entities;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Infrastructure.Configurations.EntityTypeConfigurations
{
    public class RefreshTokenConfig : IEntityTypeConfiguration<RefreshToken>
    {
        public void Configure(EntityTypeBuilder<RefreshToken> builder)
        {
            builder.HasKey(rt => rt.Id);

            builder.Property(rt => rt.Token)
                   .IsRequired()
                   .HasMaxLength(200);

            builder.HasOne(rt => rt.User)
                   .WithMany(u => u.RefreshTokens)
                   .HasForeignKey(rt => rt.UserId)
                   .OnDelete(DeleteBehavior.Cascade);

            builder.Property(rt => rt.Expires).IsRequired();
        }
    }
}

// ===== ReviewConfig.cs =====

using DnDAgency.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace DnDAgency.Infrastructure.Configurations;

public class ReviewConfig : IEntityTypeConfiguration<Review>
{
    public void Configure(EntityTypeBuilder<Review> builder)
    {
        builder.HasKey(r => r.Id);
        builder.Property(r => r.Rating).IsRequired();
        builder.Property(r => r.Comment).HasMaxLength(1000);
        builder.Property(r => r.CreatedAt).IsRequired();

        builder.HasOne(r => r.User)
               .WithMany()
               .HasForeignKey(r => r.UserId)
               .OnDelete(DeleteBehavior.Cascade);

        builder.HasOne(r => r.Master)
               .WithMany(m => m.Reviews)
               .HasForeignKey(r => r.MasterId)
               .OnDelete(DeleteBehavior.Cascade);

        // Проверка рейтинга на уровне БД
        builder.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");

        // Уникальный индекс - один пользователь не может оставить два отзыва одному мастеру
        builder.HasIndex(r => new { r.UserId, r.MasterId }).IsUnique();
    }
}

// ===== SlotConfig.cs =====

using DnDAgency.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace DnDAgency.Infrastructure.Configurations;

public class SlotConfig : IEntityTypeConfiguration<Slot>
{
    public void Configure(EntityTypeBuilder<Slot> builder)
    {
        builder.HasKey(s => s.Id);
        builder.Property(s => s.StartTime).IsRequired();

        builder.HasOne(s => s.Campaign)
               .WithMany(c => c.Slots)
               .HasForeignKey(s => s.CampaignId)
               .OnDelete(DeleteBehavior.Cascade);

        builder.HasMany(s => s.Bookings)
               .WithOne(b => b.Slot)
               .HasForeignKey(b => b.SlotId)
               .OnDelete(DeleteBehavior.Cascade);

        // Индекс для быстрого поиска слотов по времени
        builder.HasIndex(s => s.StartTime);
    }
}

// ===== UserConfig.cs =====

using DnDAgency.Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace DnDAgency.Infrastructure.Configurations
{
    public class UserConfig : IEntityTypeConfiguration<User>
    {
        public void Configure(EntityTypeBuilder<User> builder)
        {
            builder.HasKey(u => u.Id);
            builder.Property(u => u.Username).IsRequired().HasMaxLength(50);
            builder.Property(u => u.Email).IsRequired().HasMaxLength(100);
            builder.Property(u => u.PasswordHash).IsRequired();

            // Уникальные индексы
            builder.HasIndex(u => u.Email).IsUnique();
            builder.HasIndex(u => u.Username).IsUnique();

            builder.HasMany(u => u.Bookings)
                   .WithOne(b => b.User)
                   .HasForeignKey(b => b.UserId)
                   .OnDelete(DeleteBehavior.Cascade);

            // Связь один к одному с Master
            builder.HasOne(u => u.MasterProfile)
                   .WithOne(m => m.User)
                   .HasForeignKey<Master>(m => m.UserId)
                   .OnDelete(DeleteBehavior.Cascade);

            builder.Property(u => u.Role)
                   .HasConversion<string>()
                   .HasMaxLength(20);
        }
    }
}

// ===== ApplicationDbContext.cs =====

using DnDAgency.Domain.Entities;
using Microsoft.EntityFrameworkCore;

namespace DnDAgency.Infrastructure.Data
{
    public class ApplicationDbContext : DbContext
    {
        public ApplicationDbContext(DbContextOptions<ApplicationDbContext> options)
            : base(options) { }

        public DbSet<User> Users => Set<User>();
        public DbSet<Master> Masters => Set<Master>();
        public DbSet<Campaign> Campaigns => Set<Campaign>();
        public DbSet<Slot> Slots => Set<Slot>();
        public DbSet<Booking> Bookings => Set<Booking>();
        public DbSet<Review> Reviews => Set<Review>();
        public DbSet<CampaignTag> CampaignTags => Set<CampaignTag>();
        public DbSet<RefreshToken> RefreshTokens => Set<RefreshToken>();
        public DbSet<Room> Rooms => Set<Room>();


        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.ApplyConfigurationsFromAssembly(typeof(ApplicationDbContext).Assembly);
            base.OnModelCreating(modelBuilder);
        }
    }
}

// ===== IFileStorageService.cs =====

using Microsoft.AspNetCore.Http;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace DnDAgency.Infrastructure.Interfaces
{
    public interface IFileStorageService
    {
        Task<string> SaveFileAsync(IFormFile file, string folder);
        Task DeleteFileAsync(string fileUrl);
    }

}

// ===== IUnitOfWork.cs =====

using DnDAgency.Application.Interfaces;
using DnDAgency.Domain.Interfaces;
using Microsoft.EntityFrameworkCore.Storage;

namespace DnDAgency.Infrastructure.Interfaces
{
    public interface IUnitOfWork : IDisposable
    {
        ICampaignRepository Campaigns { get; }
        ISlotRepository Slots { get; }
        IMasterRepository Masters { get; }
        IUserRepository Users { get; }
        IBookingRepository Bookings { get; }
        IRefreshTokenRepository RefreshTokens { get; }

        Task<int> SaveChangesAsync(CancellationToken cancellationToken = default);
        Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = default);
        Task CommitTransactionAsync(CancellationToken cancellationToken = default);
        Task RollbackTransactionAsync(CancellationToken cancellationToken = default);
    }
}

// ===== 20250904203814_InitialMigration.cs =====

using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class InitialMigration : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Masters",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Name = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    Bio = table.Column<string>(type: "character varying(2000)", maxLength: 2000, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Masters", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Username = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false),
                    Email = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    PasswordHash = table.Column<string>(type: "text", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    UpdatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    IsActive = table.Column<bool>(type: "boolean", nullable: false),
                    Role = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Campaigns",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Title = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    Description = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: false),
                    MasterId = table.Column<Guid>(type: "uuid", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    IsActive = table.Column<bool>(type: "boolean", nullable: false),
                    Price = table.Column<decimal>(type: "numeric(18,2)", precision: 18, scale: 2, nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Campaigns", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Campaigns_Masters_MasterId",
                        column: x => x.MasterId,
                        principalTable: "Masters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Reviews",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    UserId = table.Column<Guid>(type: "uuid", nullable: false),
                    MasterId = table.Column<Guid>(type: "uuid", nullable: false),
                    Rating = table.Column<int>(type: "integer", nullable: false),
                    Comment = table.Column<string>(type: "character varying(1000)", maxLength: 1000, nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Reviews", x => x.Id);
                    table.CheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                    table.ForeignKey(
                        name: "FK_Reviews_Masters_MasterId",
                        column: x => x.MasterId,
                        principalTable: "Masters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Reviews_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Slots",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    CampaignId = table.Column<Guid>(type: "uuid", nullable: false),
                    StartTime = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    MaxPlayers = table.Column<int>(type: "integer", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Slots", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Slots_Campaigns_CampaignId",
                        column: x => x.CampaignId,
                        principalTable: "Campaigns",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Bookings",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    UserId = table.Column<Guid>(type: "uuid", nullable: false),
                    SlotId = table.Column<Guid>(type: "uuid", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Bookings", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Bookings_Slots_SlotId",
                        column: x => x.SlotId,
                        principalTable: "Slots",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Bookings_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Bookings_CreatedAt",
                table: "Bookings",
                column: "CreatedAt");

            migrationBuilder.CreateIndex(
                name: "IX_Bookings_SlotId",
                table: "Bookings",
                column: "SlotId");

            migrationBuilder.CreateIndex(
                name: "IX_Bookings_UserId_SlotId",
                table: "Bookings",
                columns: new[] { "UserId", "SlotId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Campaigns_MasterId",
                table: "Campaigns",
                column: "MasterId");

            migrationBuilder.CreateIndex(
                name: "IX_Reviews_MasterId",
                table: "Reviews",
                column: "MasterId");

            migrationBuilder.CreateIndex(
                name: "IX_Reviews_UserId_MasterId",
                table: "Reviews",
                columns: new[] { "UserId", "MasterId" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Slots_CampaignId",
                table: "Slots",
                column: "CampaignId");

            migrationBuilder.CreateIndex(
                name: "IX_Slots_StartTime",
                table: "Slots",
                column: "StartTime");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Bookings");

            migrationBuilder.DropTable(
                name: "Reviews");

            migrationBuilder.DropTable(
                name: "Slots");

            migrationBuilder.DropTable(
                name: "Users");

            migrationBuilder.DropTable(
                name: "Campaigns");

            migrationBuilder.DropTable(
                name: "Masters");
        }
    }
}

// ===== 20250904203814_InitialMigration.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250904203814_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Campaigns")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250905144500_ChangedDbScheme.cs =====

using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class ChangedDbScheme : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<DateTime>(
                name: "CreatedAt",
                table: "Masters",
                type: "timestamp with time zone",
                nullable: false,
                defaultValue: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));

            migrationBuilder.AddColumn<bool>(
                name: "IsActive",
                table: "Masters",
                type: "boolean",
                nullable: false,
                defaultValue: false);

            migrationBuilder.AddColumn<DateTime>(
                name: "UpdatedAt",
                table: "Masters",
                type: "timestamp with time zone",
                nullable: true);

            migrationBuilder.AddColumn<Guid>(
                name: "UserId",
                table: "Masters",
                type: "uuid",
                nullable: false,
                defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));

            migrationBuilder.AddColumn<DateTime>(
                name: "UpdatedAt",
                table: "Campaigns",
                type: "timestamp with time zone",
                nullable: true);

            migrationBuilder.CreateIndex(
                name: "IX_Users_Email",
                table: "Users",
                column: "Email",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Users_Username",
                table: "Users",
                column: "Username",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Masters_UserId",
                table: "Masters",
                column: "UserId",
                unique: true);

            migrationBuilder.AddForeignKey(
                name: "FK_Masters_Users_UserId",
                table: "Masters",
                column: "UserId",
                principalTable: "Users",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Masters_Users_UserId",
                table: "Masters");

            migrationBuilder.DropIndex(
                name: "IX_Users_Email",
                table: "Users");

            migrationBuilder.DropIndex(
                name: "IX_Users_Username",
                table: "Users");

            migrationBuilder.DropIndex(
                name: "IX_Masters_UserId",
                table: "Masters");

            migrationBuilder.DropColumn(
                name: "CreatedAt",
                table: "Masters");

            migrationBuilder.DropColumn(
                name: "IsActive",
                table: "Masters");

            migrationBuilder.DropColumn(
                name: "UpdatedAt",
                table: "Masters");

            migrationBuilder.DropColumn(
                name: "UserId",
                table: "Masters");

            migrationBuilder.DropColumn(
                name: "UpdatedAt",
                table: "Campaigns");
        }
    }
}

// ===== 20250905144500_ChangedDbScheme.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250905144500_ChangedDbScheme")]
    partial class ChangedDbScheme
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Campaigns")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250912121827_slotAndCampaignEntitiesWereUpdated.cs =====

using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class slotAndCampaignEntitiesWereUpdated : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "MaxPlayers",
                table: "Slots");

            migrationBuilder.AddColumn<int>(
                name: "DurationHours",
                table: "Campaigns",
                type: "integer",
                nullable: true);

            migrationBuilder.AddColumn<string>(
                name: "ImageUrl",
                table: "Campaigns",
                type: "text",
                nullable: false,
                defaultValue: "");

            migrationBuilder.AddColumn<int>(
                name: "Level",
                table: "Campaigns",
                type: "integer",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.AddColumn<int>(
                name: "MaxPlayers",
                table: "Campaigns",
                type: "integer",
                nullable: false,
                defaultValue: 0);

            migrationBuilder.CreateTable(
                name: "CampaignTag",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Name = table.Column<string>(type: "text", nullable: false),
                    CampaignId = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CampaignTag", x => x.Id);
                    table.ForeignKey(
                        name: "FK_CampaignTag_Campaigns_CampaignId",
                        column: x => x.CampaignId,
                        principalTable: "Campaigns",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_CampaignTag_CampaignId",
                table: "CampaignTag",
                column: "CampaignId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "CampaignTag");

            migrationBuilder.DropColumn(
                name: "DurationHours",
                table: "Campaigns");

            migrationBuilder.DropColumn(
                name: "ImageUrl",
                table: "Campaigns");

            migrationBuilder.DropColumn(
                name: "Level",
                table: "Campaigns");

            migrationBuilder.DropColumn(
                name: "MaxPlayers",
                table: "Campaigns");

            migrationBuilder.AddColumn<int>(
                name: "MaxPlayers",
                table: "Slots",
                type: "integer",
                nullable: false,
                defaultValue: 0);
        }
    }
}

// ===== 20250912121827_slotAndCampaignEntitiesWereUpdated.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250912121827_slotAndCampaignEntitiesWereUpdated")]
    partial class slotAndCampaignEntitiesWereUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("DurationHours")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTag");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Campaigns")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250912172137_CampaignTagsWereAdded.cs =====

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class CampaignTagsWereAdded : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_CampaignTag_Campaigns_CampaignId",
                table: "CampaignTag");

            migrationBuilder.DropPrimaryKey(
                name: "PK_CampaignTag",
                table: "CampaignTag");

            migrationBuilder.RenameTable(
                name: "CampaignTag",
                newName: "CampaignTags");

            migrationBuilder.RenameIndex(
                name: "IX_CampaignTag_CampaignId",
                table: "CampaignTags",
                newName: "IX_CampaignTags_CampaignId");

            migrationBuilder.AddPrimaryKey(
                name: "PK_CampaignTags",
                table: "CampaignTags",
                column: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_CampaignTags_Campaigns_CampaignId",
                table: "CampaignTags",
                column: "CampaignId",
                principalTable: "Campaigns",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_CampaignTags_Campaigns_CampaignId",
                table: "CampaignTags");

            migrationBuilder.DropPrimaryKey(
                name: "PK_CampaignTags",
                table: "CampaignTags");

            migrationBuilder.RenameTable(
                name: "CampaignTags",
                newName: "CampaignTag");

            migrationBuilder.RenameIndex(
                name: "IX_CampaignTags_CampaignId",
                table: "CampaignTag",
                newName: "IX_CampaignTag_CampaignId");

            migrationBuilder.AddPrimaryKey(
                name: "PK_CampaignTag",
                table: "CampaignTag",
                column: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_CampaignTag_Campaigns_CampaignId",
                table: "CampaignTag",
                column: "CampaignId",
                principalTable: "Campaigns",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }
    }
}

// ===== 20250912172137_CampaignTagsWereAdded.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250912172137_CampaignTagsWereAdded")]
    partial class CampaignTagsWereAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("DurationHours")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Campaigns")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250914101613_RefreshTokenWasAdded.cs =====

using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class RefreshTokenWasAdded : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "RefreshTokens",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Token = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: false),
                    Expires = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Created = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Revoked = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    UserId = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_RefreshTokens", x => x.Id);
                    table.ForeignKey(
                        name: "FK_RefreshTokens_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_RefreshTokens_UserId",
                table: "RefreshTokens",
                column: "UserId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "RefreshTokens");
        }
    }
}

// ===== 20250914101613_RefreshTokenWasAdded.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250914101613_RefreshTokenWasAdded")]
    partial class RefreshTokenWasAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("DurationHours")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Campaigns")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250915131429_CampaignsMastersRelationsWereUpdated.cs =====

using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class CampaignsMastersRelationsWereUpdated : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Campaigns_Masters_MasterId",
                table: "Campaigns");

            migrationBuilder.DropIndex(
                name: "IX_Campaigns_MasterId",
                table: "Campaigns");

            migrationBuilder.DropColumn(
                name: "MasterId",
                table: "Campaigns");

            migrationBuilder.AlterColumn<string>(
                name: "ImageUrl",
                table: "Campaigns",
                type: "character varying(500)",
                maxLength: 500,
                nullable: false,
                oldClrType: typeof(string),
                oldType: "text");

            migrationBuilder.CreateTable(
                name: "CampaignMaster",
                columns: table => new
                {
                    CampaignId = table.Column<Guid>(type: "uuid", nullable: false),
                    MasterId = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CampaignMaster", x => new { x.CampaignId, x.MasterId });
                    table.ForeignKey(
                        name: "FK_CampaignMaster_Campaigns_CampaignId",
                        column: x => x.CampaignId,
                        principalTable: "Campaigns",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CampaignMaster_Masters_MasterId",
                        column: x => x.MasterId,
                        principalTable: "Masters",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_CampaignMaster_MasterId",
                table: "CampaignMaster",
                column: "MasterId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "CampaignMaster");

            migrationBuilder.AlterColumn<string>(
                name: "ImageUrl",
                table: "Campaigns",
                type: "text",
                nullable: false,
                oldClrType: typeof(string),
                oldType: "character varying(500)",
                oldMaxLength: 500);

            migrationBuilder.AddColumn<Guid>(
                name: "MasterId",
                table: "Campaigns",
                type: "uuid",
                nullable: false,
                defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));

            migrationBuilder.CreateIndex(
                name: "IX_Campaigns_MasterId",
                table: "Campaigns",
                column: "MasterId");

            migrationBuilder.AddForeignKey(
                name: "FK_Campaigns_Masters_MasterId",
                table: "Campaigns",
                column: "MasterId",
                principalTable: "Masters",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }
    }
}

// ===== 20250915131429_CampaignsMastersRelationsWereUpdated.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250915131429_CampaignsMastersRelationsWereUpdated")]
    partial class CampaignsMastersRelationsWereUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignId", "MasterId");

                    b.HasIndex("MasterId");

                    b.ToTable("CampaignMaster");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("DurationHours")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Master", null)
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250917131206_MastersEntityWasUpdated.cs =====

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class MastersEntityWasUpdated : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<string>(
                name: "PhotoUrl",
                table: "Masters",
                type: "text",
                nullable: false,
                defaultValue: "");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "PhotoUrl",
                table: "Masters");
        }
    }
}

// ===== 20250917131206_MastersEntityWasUpdated.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250917131206_MastersEntityWasUpdated")]
    partial class MastersEntityWasUpdated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignId", "MasterId");

                    b.HasIndex("MasterId");

                    b.ToTable("CampaignMaster");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int?>("DurationHours")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Master", null)
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250922144258_SlotsLogicWasModified.cs =====

using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class SlotsLogicWasModified : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AlterColumn<double>(
                name: "DurationHours",
                table: "Campaigns",
                type: "double precision",
                nullable: true,
                oldClrType: typeof(int),
                oldType: "integer",
                oldNullable: true);

            migrationBuilder.AddColumn<TimeSpan>(
                name: "WorkingHoursEnd",
                table: "Campaigns",
                type: "interval",
                nullable: false,
                defaultValue: new TimeSpan(0, 0, 0, 0, 0));

            migrationBuilder.AddColumn<TimeSpan>(
                name: "WorkingHoursStart",
                table: "Campaigns",
                type: "interval",
                nullable: false,
                defaultValue: new TimeSpan(0, 0, 0, 0, 0));
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "WorkingHoursEnd",
                table: "Campaigns");

            migrationBuilder.DropColumn(
                name: "WorkingHoursStart",
                table: "Campaigns");

            migrationBuilder.AlterColumn<int>(
                name: "DurationHours",
                table: "Campaigns",
                type: "integer",
                nullable: true,
                oldClrType: typeof(double),
                oldType: "double precision",
                oldNullable: true);
        }
    }
}

// ===== 20250922144258_SlotsLogicWasModified.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250922144258_SlotsLogicWasModified")]
    partial class SlotsLogicWasModified
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignId", "MasterId");

                    b.HasIndex("MasterId");

                    b.ToTable("CampaignMaster");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double?>("DurationHours")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("WorkingHoursEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkingHoursStart")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Master", null)
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250923175431_RoomEntityWasAdded.cs =====

using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class RoomEntityWasAdded : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            // 1) Создать таблицу Room
            migrationBuilder.CreateTable(
                name: "Room",
                columns: table => new
                {
                    Id = table.Column<Guid>(type: "uuid", nullable: false),
                    Name = table.Column<string>(type: "text", nullable: false),
                    Type = table.Column<int>(type: "integer", nullable: false),
                    Capacity = table.Column<int>(type: "integer", nullable: true),
                    IsActive = table.Column<bool>(type: "boolean", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "NOW()")
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Room", x => x.Id);
                });

            // 2) Вставить дефолтную комнату
            migrationBuilder.Sql(@"
                INSERT INTO ""Room"" (""Id"", ""Name"", ""Type"", ""IsActive"", ""CreatedAt"")
                VALUES ('00000000-0000-0000-0000-000000000000', 'Default Room', 0, true, NOW())
                ON CONFLICT (""Id"") DO NOTHING;
            ");

            // 3) Добавить колонку RoomId в Campaigns с default = дефолтная комната
            migrationBuilder.AddColumn<Guid>(
                name: "RoomId",
                table: "Campaigns",
                type: "uuid",
                nullable: false,
                defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));

            // 4) Добавить колонку PlayersCount в Bookings
            migrationBuilder.AddColumn<int>(
                name: "PlayersCount",
                table: "Bookings",
                type: "integer",
                nullable: false,
                defaultValue: 0);

            // 5) Создать индекс на RoomId
            migrationBuilder.CreateIndex(
                name: "IX_Campaigns_RoomId",
                table: "Campaigns",
                column: "RoomId");

            // 6) Добавить внешний ключ
            migrationBuilder.AddForeignKey(
                name: "FK_Campaigns_Room_RoomId",
                table: "Campaigns",
                column: "RoomId",
                principalTable: "Room",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            // Убрать FK
            migrationBuilder.DropForeignKey(
                name: "FK_Campaigns_Room_RoomId",
                table: "Campaigns");

            // Удалить индекс
            migrationBuilder.DropIndex(
                name: "IX_Campaigns_RoomId",
                table: "Campaigns");

            // Удалить колонку RoomId из Campaigns
            migrationBuilder.DropColumn(
                name: "RoomId",
                table: "Campaigns");

            // Удалить PlayersCount из Bookings
            migrationBuilder.DropColumn(
                name: "PlayersCount",
                table: "Bookings");

            // Удалить дефолтную комнату
            migrationBuilder.Sql(@"
                DELETE FROM ""Room"" WHERE ""Id"" = '00000000-0000-0000-0000-000000000000';
            ");

            // Удалить таблицу Room
            migrationBuilder.DropTable(
                name: "Room");
        }
    }
}

// ===== 20250923175431_RoomEntityWasAdded.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250923175431_RoomEntityWasAdded")]
    partial class RoomEntityWasAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignId", "MasterId");

                    b.HasIndex("MasterId");

                    b.ToTable("CampaignMaster");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double?>("DurationHours")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("WorkingHoursEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkingHoursStart")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Room");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Master", null)
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Room", "Room")
                        .WithMany("Campaigns")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Room", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250924101345_DBContextUPD.cs =====

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class DBContextUPD : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Campaigns_Room_RoomId",
                table: "Campaigns");

            migrationBuilder.DropPrimaryKey(
                name: "PK_Room",
                table: "Room");

            migrationBuilder.RenameTable(
                name: "Room",
                newName: "Rooms");

            migrationBuilder.AddPrimaryKey(
                name: "PK_Rooms",
                table: "Rooms",
                column: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Campaigns_Rooms_RoomId",
                table: "Campaigns",
                column: "RoomId",
                principalTable: "Rooms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Campaigns_Rooms_RoomId",
                table: "Campaigns");

            migrationBuilder.DropPrimaryKey(
                name: "PK_Rooms",
                table: "Rooms");

            migrationBuilder.RenameTable(
                name: "Rooms",
                newName: "Room");

            migrationBuilder.AddPrimaryKey(
                name: "PK_Room",
                table: "Room",
                column: "Id");

            migrationBuilder.AddForeignKey(
                name: "FK_Campaigns_Room_RoomId",
                table: "Campaigns",
                column: "RoomId",
                principalTable: "Room",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }
    }
}

// ===== 20250924101345_DBContextUPD.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250924101345_DBContextUPD")]
    partial class DBContextUPD
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignId", "MasterId");

                    b.HasIndex("MasterId");

                    b.ToTable("CampaignMaster");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double?>("DurationHours")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("WorkingHoursEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkingHoursStart")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Master", null)
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Room", "Room")
                        .WithMany("Campaigns")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Room", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250924112422_RoomTypeWasAddedToCampaignEntity.cs =====

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class RoomTypeWasAddedToCampaignEntity : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}

// ===== 20250924112422_RoomTypeWasAddedToCampaignEntity.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250924112422_RoomTypeWasAddedToCampaignEntity")]
    partial class RoomTypeWasAddedToCampaignEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignId", "MasterId");

                    b.HasIndex("MasterId");

                    b.ToTable("CampaignMaster");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double?>("DurationHours")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("WorkingHoursEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkingHoursStart")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Master", null)
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Room", "Room")
                        .WithMany("Campaigns")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Room", b =>
                {
                    b.Navigation("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250926111319_CampaignEntityNowContainsBothTypesOfRooms.cs =====

using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class CampaignEntityNowContainsBothTypesOfRooms : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_Campaigns_Rooms_RoomId",
                table: "Campaigns");

            migrationBuilder.DropIndex(
                name: "IX_Campaigns_RoomId",
                table: "Campaigns");

            migrationBuilder.DropColumn(
                name: "RoomId",
                table: "Campaigns");

            migrationBuilder.CreateTable(
                name: "CampaignRoom",
                columns: table => new
                {
                    CampaignsId = table.Column<Guid>(type: "uuid", nullable: false),
                    RoomsId = table.Column<Guid>(type: "uuid", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_CampaignRoom", x => new { x.CampaignsId, x.RoomsId });
                    table.ForeignKey(
                        name: "FK_CampaignRoom_Campaigns_CampaignsId",
                        column: x => x.CampaignsId,
                        principalTable: "Campaigns",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_CampaignRoom_Rooms_RoomsId",
                        column: x => x.RoomsId,
                        principalTable: "Rooms",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_CampaignRoom_RoomsId",
                table: "CampaignRoom",
                column: "RoomsId");
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "CampaignRoom");

            migrationBuilder.AddColumn<Guid>(
                name: "RoomId",
                table: "Campaigns",
                type: "uuid",
                nullable: false,
                defaultValue: new Guid("00000000-0000-0000-0000-000000000000"));

            migrationBuilder.CreateIndex(
                name: "IX_Campaigns_RoomId",
                table: "Campaigns",
                column: "RoomId");

            migrationBuilder.AddForeignKey(
                name: "FK_Campaigns_Rooms_RoomId",
                table: "Campaigns",
                column: "RoomId",
                principalTable: "Rooms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }
    }
}

// ===== 20250926111319_CampaignEntityNowContainsBothTypesOfRooms.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250926111319_CampaignEntityNowContainsBothTypesOfRooms")]
    partial class CampaignEntityNowContainsBothTypesOfRooms
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignId", "MasterId");

                    b.HasIndex("MasterId");

                    b.ToTable("CampaignMaster");
                });

            modelBuilder.Entity("CampaignRoom", b =>
                {
                    b.Property<Guid>("CampaignsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("CampaignRoom");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double?>("DurationHours")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("WorkingHoursEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkingHoursStart")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Master", null)
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CampaignRoom", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250926125829_CampaignConfigChanges.cs =====

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class CampaignConfigChanges : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}

// ===== 20250926125829_CampaignConfigChanges.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250926125829_CampaignConfigChanges")]
    partial class CampaignConfigChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignId", "MasterId");

                    b.HasIndex("MasterId");

                    b.ToTable("CampaignMaster");
                });

            modelBuilder.Entity("CampaignRoom", b =>
                {
                    b.Property<Guid>("CampaignsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("CampaignRoom");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double?>("DurationHours")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("WorkingHoursEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkingHoursStart")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Master", null)
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CampaignRoom", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250926132330_CampaignConfigChanges2.cs =====

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class CampaignConfigChanges2 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_CampaignRoom_Campaigns_CampaignsId",
                table: "CampaignRoom");

            migrationBuilder.DropForeignKey(
                name: "FK_CampaignRoom_Rooms_RoomsId",
                table: "CampaignRoom");

            migrationBuilder.RenameColumn(
                name: "RoomsId",
                table: "CampaignRoom",
                newName: "RoomId");

            migrationBuilder.RenameColumn(
                name: "CampaignsId",
                table: "CampaignRoom",
                newName: "CampaignId");

            migrationBuilder.RenameIndex(
                name: "IX_CampaignRoom_RoomsId",
                table: "CampaignRoom",
                newName: "IX_CampaignRoom_RoomId");

            migrationBuilder.AddForeignKey(
                name: "FK_CampaignRoom_Campaigns_CampaignId",
                table: "CampaignRoom",
                column: "CampaignId",
                principalTable: "Campaigns",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_CampaignRoom_Rooms_RoomId",
                table: "CampaignRoom",
                column: "RoomId",
                principalTable: "Rooms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_CampaignRoom_Campaigns_CampaignId",
                table: "CampaignRoom");

            migrationBuilder.DropForeignKey(
                name: "FK_CampaignRoom_Rooms_RoomId",
                table: "CampaignRoom");

            migrationBuilder.RenameColumn(
                name: "RoomId",
                table: "CampaignRoom",
                newName: "RoomsId");

            migrationBuilder.RenameColumn(
                name: "CampaignId",
                table: "CampaignRoom",
                newName: "CampaignsId");

            migrationBuilder.RenameIndex(
                name: "IX_CampaignRoom_RoomId",
                table: "CampaignRoom",
                newName: "IX_CampaignRoom_RoomsId");

            migrationBuilder.AddForeignKey(
                name: "FK_CampaignRoom_Campaigns_CampaignsId",
                table: "CampaignRoom",
                column: "CampaignsId",
                principalTable: "Campaigns",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_CampaignRoom_Rooms_RoomsId",
                table: "CampaignRoom",
                column: "RoomsId",
                principalTable: "Rooms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }
    }
}

// ===== 20250926132330_CampaignConfigChanges2.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250926132330_CampaignConfigChanges2")]
    partial class CampaignConfigChanges2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignId", "MasterId");

                    b.HasIndex("MasterId");

                    b.ToTable("CampaignMaster");
                });

            modelBuilder.Entity("CampaignRoom", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignId", "RoomId");

                    b.HasIndex("RoomId");

                    b.ToTable("CampaignRoom");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double?>("DurationHours")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("WorkingHoursEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkingHoursStart")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Master", null)
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CampaignRoom", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250926134755_CampaignConfigChanges3.cs =====

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class CampaignConfigChanges3 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_CampaignRoom_Campaigns_CampaignId",
                table: "CampaignRoom");

            migrationBuilder.DropForeignKey(
                name: "FK_CampaignRoom_Rooms_RoomId",
                table: "CampaignRoom");

            migrationBuilder.RenameColumn(
                name: "RoomId",
                table: "CampaignRoom",
                newName: "RoomsId");

            migrationBuilder.RenameColumn(
                name: "CampaignId",
                table: "CampaignRoom",
                newName: "CampaignsId");

            migrationBuilder.RenameIndex(
                name: "IX_CampaignRoom_RoomId",
                table: "CampaignRoom",
                newName: "IX_CampaignRoom_RoomsId");

            migrationBuilder.AddForeignKey(
                name: "FK_CampaignRoom_Campaigns_CampaignsId",
                table: "CampaignRoom",
                column: "CampaignsId",
                principalTable: "Campaigns",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_CampaignRoom_Rooms_RoomsId",
                table: "CampaignRoom",
                column: "RoomsId",
                principalTable: "Rooms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropForeignKey(
                name: "FK_CampaignRoom_Campaigns_CampaignsId",
                table: "CampaignRoom");

            migrationBuilder.DropForeignKey(
                name: "FK_CampaignRoom_Rooms_RoomsId",
                table: "CampaignRoom");

            migrationBuilder.RenameColumn(
                name: "RoomsId",
                table: "CampaignRoom",
                newName: "RoomId");

            migrationBuilder.RenameColumn(
                name: "CampaignsId",
                table: "CampaignRoom",
                newName: "CampaignId");

            migrationBuilder.RenameIndex(
                name: "IX_CampaignRoom_RoomsId",
                table: "CampaignRoom",
                newName: "IX_CampaignRoom_RoomId");

            migrationBuilder.AddForeignKey(
                name: "FK_CampaignRoom_Campaigns_CampaignId",
                table: "CampaignRoom",
                column: "CampaignId",
                principalTable: "Campaigns",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);

            migrationBuilder.AddForeignKey(
                name: "FK_CampaignRoom_Rooms_RoomId",
                table: "CampaignRoom",
                column: "RoomId",
                principalTable: "Rooms",
                principalColumn: "Id",
                onDelete: ReferentialAction.Cascade);
        }
    }
}

// ===== 20250926134755_CampaignConfigChanges3.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250926134755_CampaignConfigChanges3")]
    partial class CampaignConfigChanges3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignId", "MasterId");

                    b.HasIndex("MasterId");

                    b.ToTable("CampaignMaster");
                });

            modelBuilder.Entity("CampaignRoom", b =>
                {
                    b.Property<Guid>("CampaignsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("CampaignRoom");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double?>("DurationHours")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("WorkingHoursEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkingHoursStart")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Master", null)
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CampaignRoom", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== 20250926150513_GenericRepositoryChanges.cs =====

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    /// <inheritdoc />
    public partial class GenericRepositoryChanges : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}

// ===== 20250926150513_GenericRepositoryChanges.Designer.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250926150513_GenericRepositoryChanges")]
    partial class GenericRepositoryChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignId", "MasterId");

                    b.HasIndex("MasterId");

                    b.ToTable("CampaignMaster");
                });

            modelBuilder.Entity("CampaignRoom", b =>
                {
                    b.Property<Guid>("CampaignsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("CampaignRoom");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double?>("DurationHours")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("WorkingHoursEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkingHoursStart")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Master", null)
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CampaignRoom", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== ApplicationDbContextModelSnapshot.cs =====

// <auto-generated />
using System;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DnDAgency.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignId", "MasterId");

                    b.HasIndex("MasterId");

                    b.ToTable("CampaignMaster");
                });

            modelBuilder.Entity("CampaignRoom", b =>
                {
                    b.Property<Guid>("CampaignsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomsId")
                        .HasColumnType("uuid");

                    b.HasKey("CampaignsId", "RoomsId");

                    b.HasIndex("RoomsId");

                    b.ToTable("CampaignRoom");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PlayersCount")
                        .HasColumnType("integer");

                    b.Property<Guid>("SlotId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("SlotId");

                    b.HasIndex("UserId", "SlotId")
                        .IsUnique();

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<double?>("DurationHours")
                        .HasColumnType("double precision");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("MaxPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("WorkingHoursEnd")
                        .HasColumnType("interval");

                    b.Property<TimeSpan>("WorkingHoursStart")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.ToTable("CampaignTags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MasterId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MasterId");

                    b.HasIndex("UserId", "MasterId")
                        .IsUnique();

                    b.ToTable("Reviews", t =>
                        {
                            t.HasCheckConstraint("CK_Review_Rating", "\"Rating\" >= 1 AND \"Rating\" <= 5");
                        });
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CampaignId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("StartTime");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CampaignMaster", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Master", null)
                        .WithMany()
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CampaignRoom", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", null)
                        .WithMany()
                        .HasForeignKey("CampaignsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.Room", null)
                        .WithMany()
                        .HasForeignKey("RoomsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Booking", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Slot", "Slot")
                        .WithMany("Bookings")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Slot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.CampaignTag", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Tags")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithOne("MasterProfile")
                        .HasForeignKey("DnDAgency.Domain.Entities.Master", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Review", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Master", "Master")
                        .WithMany("Reviews")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DnDAgency.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.HasOne("DnDAgency.Domain.Entities.Campaign", "Campaign")
                        .WithMany("Slots")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Campaign", b =>
                {
                    b.Navigation("Slots");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Master", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.Slot", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DnDAgency.Domain.Entities.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("MasterProfile");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}

// ===== .NETCoreApp,Version=v8.0.AssemblyAttributes.cs =====

// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

// ===== DnDAgency.Infrastructure.AssemblyInfo.cs =====

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("DnDAgency.Infrastructure")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+a3c8c3daeb4d511b779d3bbcd98331fd40711d33")]
[assembly: System.Reflection.AssemblyProductAttribute("DnDAgency.Infrastructure")]
[assembly: System.Reflection.AssemblyTitleAttribute("DnDAgency.Infrastructure")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// ===== DnDAgency.Infrastructure.GlobalUsings.g.cs =====

// <auto-generated/>
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

// ===== BookingRepository.cs =====

using DnDAgency.Domain.Entities;
using DnDAgency.Domain.Interfaces;
using Microsoft.EntityFrameworkCore;
using ApplicationDbContext = DnDAgency.Infrastructure.Data.ApplicationDbContext;

namespace DnDAgency.Infrastructure.Repositories;

public class BookingRepository : GenericRepository<Booking>, IBookingRepository
{
    public BookingRepository(ApplicationDbContext context) : base(context) { }

    public override async Task<Booking?> GetByIdAsync(Guid id)
    {
        return await _dbSet
            .Include(b => b.User)
            .Include(b => b.Slot)
                .ThenInclude(s => s.Campaign)
                    .ThenInclude(c => c.Masters) // коллекция мастеров
            .FirstOrDefaultAsync(b => b.Id == id);
    }

    public async Task<List<Booking>> GetByUserIdAsync(Guid userId)
    {
        return await _dbSet
            .Include(b => b.User)
            .Include(b => b.Slot)
                .ThenInclude(s => s.Campaign)
                    .ThenInclude(c => c.Masters)
            .Where(b => b.UserId == userId)
            .OrderByDescending(b => b.CreatedAt)
            .AsNoTracking()
            .ToListAsync();
    }

    public async Task<Booking?> GetByUserAndSlotAsync(Guid userId, Guid slotId)
    {
        return await _dbSet
            .Include(b => b.User)
            .Include(b => b.Slot)
            .FirstOrDefaultAsync(b => b.UserId == userId && b.SlotId == slotId);
    }

    public async Task<List<Booking>> GetBySlotIdAsync(Guid slotId)
    {
        return await _dbSet
            .Include(b => b.User)
            .Include(b => b.Slot)
            .Where(b => b.SlotId == slotId)
            .AsNoTracking()
            .ToListAsync();
    }
}

// ===== CampaignRepository.cs =====

using DnDAgency.Domain.Entities;
using DnDAgency.Domain.Interfaces;
using Microsoft.EntityFrameworkCore;
using ApplicationDbContext = DnDAgency.Infrastructure.Data.ApplicationDbContext;

namespace DnDAgency.Infrastructure.Repositories;

public partial class CampaignRepository : GenericRepository<Campaign>, ICampaignRepository
{
    public CampaignRepository(ApplicationDbContext context) : base(context) { }

    // Compiled queries для критических запросов
    private static readonly Func<ApplicationDbContext, Guid, Campaign?> GetByIdWithSlotsCompiledQuery =
        EF.CompileQuery((ApplicationDbContext context, Guid id) =>
            context.Campaigns
                .Include(c => c.Rooms)
                .Include(c => c.Slots)
                .AsNoTracking()
                .FirstOrDefault(c => c.Id == id));

    private static readonly Func<ApplicationDbContext, List<Guid>, IEnumerable<Master>> GetMastersByIdsCompiledQuery =
        EF.CompileQuery((ApplicationDbContext context, List<Guid> masterIds) =>
            context.Masters.Where(m => masterIds.Contains(m.Id)));

    public async Task<Campaign?> GetByIdForUpdateAsync(Guid id)
    {
        return await _dbSet
            .Include(c => c.Masters)
            .Include(c => c.Tags)
            .Include(c => c.Rooms)
            .FirstOrDefaultAsync(c => c.Id == id);
    }

    public override async Task<Campaign?> GetByIdAsync(Guid id)
    {
        return await _dbSet
            .Include(c => c.Masters)
            .Include(c => c.Tags)
            .Include(c => c.Slots)
                .ThenInclude(s => s.Bookings)
                    .ThenInclude(b => b.User)
            .Include(c => c.Rooms)
            .AsSplitQuery()
            .AsNoTracking()
            .FirstOrDefaultAsync(c => c.Id == id);
    }

    public async Task<Campaign?> GetByIdWithSlotsAsync(Guid id)
    {
        return await Task.FromResult(GetByIdWithSlotsCompiledQuery(_context, id));
    }

    // Новый метод для batch получения мастеров
    public async Task<List<Master>> GetMastersByIdsAsync(List<Guid> masterIds)
    {
        if (!masterIds.Any()) return new List<Master>();
        return await Task.FromResult(GetMastersByIdsCompiledQuery(_context, masterIds).ToList());
    }

    public async Task<List<Campaign>> GetCampaignCatalogAsync()
    {
        return await _dbSet
            .Include(c => c.Tags)
            //.Where(c => c.IsActive)
            .AsNoTracking()
            .ToListAsync();
    }

    public async Task<List<Campaign>> GetByUserIdAsync(Guid userId)
    {
        return await _dbSet
            .Include(c => c.Masters)
            .Include(c => c.Tags)
            .Include(c => c.Slots)
            .Where(c => c.Masters.Any(m => m.UserId == userId))
            .AsSplitQuery()
            .AsNoTracking()
            .ToListAsync();
    }

    public override async Task<List<Campaign>> GetAllAsync()
    {
        return await _dbSet
            .Include(c => c.Masters)
            .Include(c => c.Tags)
            .Include(c => c.Slots)
            .AsSplitQuery()
            .AsNoTracking()
            .ToListAsync();
    }

    public async Task<List<Campaign>> GetActiveCampaignsAsync()
    {
        return await _dbSet
            .Include(c => c.Masters)
            .Include(c => c.Tags)
            .Include(c => c.Slots)
            .Where(c => c.IsActive)
            .AsSplitQuery()
            .AsNoTracking()
            .ToListAsync();
    }

    public async Task<List<Campaign>> GetByMasterIdAsync(Guid masterId)
    {
        return await _dbSet
            .Include(c => c.Masters)
            .Include(c => c.Tags)
            .Include(c => c.Slots)
            .Where(c => c.Masters.Any(m => m.Id == masterId))
            .AsSplitQuery()
            .AsNoTracking()
            .ToListAsync();
    }

    public async Task<List<Room>> GetRoomsByIdsAsync(List<Guid> roomIds)
    {
        if (!roomIds.Any()) return new List<Room>();
        return await _context.Set<Room>()
            .Where(r => roomIds.Contains(r.Id))
            .AsNoTracking()
            .ToListAsync();
    }

    public async Task UpdateCampaignTagsAsync(Guid campaignId, List<string> tagNames)
    {
        var existingTags = await _context.Set<CampaignTag>()
            .Where(t => t.CampaignId == campaignId)
            .ToListAsync();
        _context.Set<CampaignTag>().RemoveRange(existingTags);
        var newTags = tagNames.Select(name => new CampaignTag(name, campaignId));
        await _context.Set<CampaignTag>().AddRangeAsync(newTags);
    }

    public async Task<List<Room>> GetRoomsByTypesAsync(List<string> roomTypes)
    {
        if (!roomTypes.Any()) return new List<Room>();

        var enumTypes = roomTypes.Select(t => Enum.Parse<RoomType>(t)).ToList();

        return await _context.Set<Room>()
            .Where(r => enumTypes.Contains(r.Type))
            .ToListAsync();
    }

    public async Task UpdateCampaignRoomsAsync(Guid campaignId, List<Guid> roomIds)
    {
        roomIds = roomIds?.Where(id => id != Guid.Empty).ToList() ?? new List<Guid>();

        var campaign = await _dbSet
            .Include(c => c.Rooms)
            .FirstOrDefaultAsync(c => c.Id == campaignId);

        if (campaign == null) return;

        // убрать явно некорректные комнаты в коллекции
        campaign.Rooms.RemoveAll(r => r.Id == Guid.Empty);

        // удалить те, которых нет в новом списке
        campaign.Rooms.RemoveAll(r => !roomIds.Contains(r.Id));

        var existingIds = campaign.Rooms.Select(r => r.Id).ToHashSet();

        foreach (var id in roomIds)
        {
            if (existingIds.Contains(id)) continue;
            var room = await _context.Rooms.FindAsync(id); // tracked or null
            if (room == null) continue;
            _context.Entry(room).State = EntityState.Unchanged;
            campaign.Rooms.Add(room);
        }
    }


}

// ===== GenericRepository.cs =====

using DnDAgency.Domain.Interfaces;
using Microsoft.EntityFrameworkCore;
using ApplicationDbContext = DnDAgency.Infrastructure.Data.ApplicationDbContext;

namespace DnDAgency.Infrastructure.Repositories
{
    public class GenericRepository<T> : IRepository<T> where T : class
    {
        protected readonly ApplicationDbContext _context;
        protected readonly DbSet<T> _dbSet;

        public GenericRepository(ApplicationDbContext context)
        {
            _context = context;
            _dbSet = context.Set<T>();
        }

        public virtual async Task<T?> GetByIdAsync(Guid id)
        {
            return await _dbSet.FindAsync(id);
        }

        public virtual async Task<List<T>> GetAllAsync()
        {
            return await _dbSet.AsNoTracking().ToListAsync();
        }

        public async Task AddAsync(T entity)
        {
            await _dbSet.AddAsync(entity);
        }

        public void Update(T entity)
        {
            var entry = _context.Entry(entity);
            if (entry.State == EntityState.Detached)
            {
                _dbSet.Update(entity);
            }
        }

        public void Delete(T entity)
        {
            _dbSet.Remove(entity);
        }
    }
}

// ===== MasterRepository.cs =====

using DnDAgency.Domain.Entities;
using DnDAgency.Domain.Interfaces;
using Microsoft.EntityFrameworkCore;
using ApplicationDbContext = DnDAgency.Infrastructure.Data.ApplicationDbContext;

namespace DnDAgency.Infrastructure.Repositories;

public class MasterRepository : GenericRepository<Master>, IMasterRepository
{
    private readonly ApplicationDbContext _context;

    public MasterRepository(ApplicationDbContext context) : base(context)
    {
        _context = context;
    }

    public async Task<Master?> GetByUserIdAsync(Guid userId)
    {
        return await _dbSet
            .Include(m => m.Campaigns) // если хочешь подгружать связанные кампании
            .FirstOrDefaultAsync(m => m.UserId == userId);
    }

    public override async Task<Master?> GetByIdAsync(Guid id)
    {
        return await _dbSet
            .Include(m => m.Campaigns) // если нужно
            .FirstOrDefaultAsync(m => m.Id == id);
    }
}

// ===== RefreshTokenRepository.cs =====

using DnDAgency.Application.Interfaces;
using DnDAgency.Domain.Entities;
using DnDAgency.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;

namespace DnDAgency.Infrastructure.Repositories
{
    public class RefreshTokenRepository : GenericRepository<RefreshToken>, IRefreshTokenRepository
    {
        public RefreshTokenRepository(ApplicationDbContext context) : base(context) { }

        public async Task<RefreshToken?> GetByTokenAsync(string token)
        {
            return await _dbSet.FirstOrDefaultAsync(rt => rt.Token == token);
        }

        
    }
}

// ===== RoomRepository.cs =====

using DnDAgency.Domain.Entities;
using DnDAgency.Domain.Interfaces;
using Microsoft.EntityFrameworkCore;
using ApplicationDbContext = DnDAgency.Infrastructure.Data.ApplicationDbContext;

namespace DnDAgency.Infrastructure.Repositories
{
    public class RoomRepository : GenericRepository<Room>, IRoomRepository
    {
        public RoomRepository(ApplicationDbContext context) : base(context) { }

        public async Task<List<Room>> GetActiveRoomsAsync()
        {
            return await _dbSet
                .Where(r => r.IsActive)
                .OrderBy(r => r.Name)
                .AsNoTracking()
                .ToListAsync();
        }

        public async Task<Room?> GetByNameAsync(string name)
        {
            return await _dbSet
                .FirstOrDefaultAsync(r => r.Name == name);
        }
    }

    // Дополнительные методы для CampaignRepository
    public partial class CampaignRepository
    {
        public async Task<List<Campaign>> GetByRoomIdAsync(Guid roomId)
        {
            return await _dbSet
                .Include(c => c.Masters)
                .Include(c => c.Slots)
                    .ThenInclude(s => s.Bookings)
                .Include(c => c.Rooms)
                .Where(c => c.Rooms.Any(r => r.Id == roomId) && c.IsActive)
                .AsNoTracking()
                .ToListAsync();
        }

        public async Task<List<Campaign>> GetOnlineCampaignsByMasterIdAsync(Guid masterId)
        {
            return await _dbSet
                .Include(c => c.Masters)
                .Include(c => c.Slots)
                    .ThenInclude(s => s.Bookings)
                .Include(c => c.Rooms)
                .Where(c => c.Masters.Any(m => m.Id == masterId) &&
                           c.Rooms.Any(r => r.Type == RoomType.Online) &&
                           c.IsActive)
                .AsNoTracking()
                .ToListAsync();
        }
    }

    // Дополнительный метод для SlotRepository
    public partial class SlotRepository
    {
        public async Task<List<Slot>> GetByCampaignAndDateAsync(Guid campaignId, DateTime date)
        {
            return await _dbSet
                .Include(s => s.Bookings)
                .Where(s => s.CampaignId == campaignId && s.StartTime.Date == date.Date)
                .AsNoTracking()
                .ToListAsync();
        }
    }
}

// ===== SlotRepository.cs =====

using DnDAgency.Domain.Entities;
using DnDAgency.Domain.Interfaces;
using Microsoft.EntityFrameworkCore;
using ApplicationDbContext = DnDAgency.Infrastructure.Data.ApplicationDbContext;

namespace DnDAgency.Infrastructure.Repositories;

public partial class SlotRepository : GenericRepository<Slot>, ISlotRepository
{
    public SlotRepository(ApplicationDbContext context) : base(context) { }

    public override async Task<Slot?> GetByIdAsync(Guid id)
    {
        return await _dbSet
            .Include(s => s.Campaign)
                .ThenInclude(c => c.Masters) 
            .Include(s => s.Bookings)
                .ThenInclude(b => b.User)
            .FirstOrDefaultAsync(s => s.Id == id);
    }

    public async Task<List<Slot>> GetByCampaignIdAsync(Guid campaignId)
    {
        return await _dbSet
            .Include(s => s.Campaign)
                .ThenInclude(c => c.Masters)
            .Include(s => s.Bookings)
                .ThenInclude(b => b.User)
            .Where(s => s.CampaignId == campaignId)
            .OrderBy(s => s.StartTime)
            .AsNoTracking()
            .ToListAsync();
    }

    public async Task<List<Slot>> GetAvailableSlotsByCampaignIdAsync(Guid campaignId)
    {
        var now = DateTime.UtcNow;
        return await _dbSet
            .Include(s => s.Bookings)
            .Include(s => s.Campaign)
            .Where(s => s.CampaignId == campaignId &&
                        s.StartTime > now &&
                        s.Bookings.Count < s.Campaign.MaxPlayers)
            .OrderBy(s => s.StartTime)
            .AsNoTracking()
            .ToListAsync();
    }

    public async Task<List<Slot>> GetUserSlotsAsync(Guid userId)
    {
        return await _dbSet
            .Include(s => s.Campaign)
                .ThenInclude(c => c.Masters)
            .Include(s => s.Bookings.Where(b => b.UserId == userId))
            .Where(s => s.Bookings.Any(b => b.UserId == userId))
            .OrderBy(s => s.StartTime)
            .AsNoTracking()
            .ToListAsync();
    }

    public async Task<List<Slot>> GetUpcomingSlotsAsync()
    {
        var now = DateTime.UtcNow;
        return await _dbSet
            .Include(s => s.Campaign)
                .ThenInclude(c => c.Masters)
            .Include(s => s.Bookings)
            .Where(s => s.StartTime > now)
            .OrderBy(s => s.StartTime)
            .AsNoTracking()
            .ToListAsync();
    }

    public async Task<List<Guid>> GetCampaignIdsWithAvailableSlotsAsync(List<Guid> campaignIds)
    {
        var now = DateTime.UtcNow;
        return await _dbSet
            .Include(s => s.Campaign)
            .Where(s => campaignIds.Contains(s.CampaignId) &&
                       s.StartTime > now &&
                       s.Bookings.Count < s.Campaign.MaxPlayers)
            .Select(s => s.CampaignId)
            .Distinct()
            .ToListAsync();
    }

    public async Task<Slot?> GetByCampaignAndTimeAsync(Guid campaignId, DateTime startTime)
    {
        return await _dbSet
            .Include(s => s.Campaign)
                .ThenInclude(c => c.Masters)
            .Include(s => s.Bookings)
                .ThenInclude(b => b.User)
            .FirstOrDefaultAsync(s => s.CampaignId == campaignId &&
                                s.StartTime.Date == startTime.Date &&
                                s.StartTime.TimeOfDay == startTime.TimeOfDay);
    }

    public async Task<List<ConflictSlot>> GetBookedSlotsForRoomAndDateAsync(Guid roomId, DateTime date)
    {
        var utcDate = DateTime.SpecifyKind(date.Date, DateTimeKind.Utc);
        return await _dbSet
            .Include(s => s.Campaign)
                .ThenInclude(c => c.Rooms)
            .Include(s => s.Bookings)
            .Where(s => s.Campaign.Rooms.Any(r => r.Id == roomId) &&
                       s.Campaign.IsActive &&
                       s.Campaign.DurationHours.HasValue &&
                       s.StartTime.Date == utcDate.Date &&
                       s.Bookings.Any())
            .Select(s => new ConflictSlot
            {
                Id = s.Id,
                StartTime = s.StartTime,
                EndTime = s.StartTime.AddHours(s.Campaign.DurationHours.Value),
                CampaignId = s.Campaign.Id
            })
            .AsNoTracking()
            .ToListAsync();
    }

    public async Task<Dictionary<Guid, int>> GetPlayersCountForSlotsAsync(List<Guid> slotIds)
    {
        return await _context.Set<Booking>()
            .Where(b => slotIds.Contains(b.SlotId))
            .GroupBy(b => b.SlotId)
            .Select(g => new { SlotId = g.Key, Count = g.Sum(b => b.PlayersCount) })
            .ToDictionaryAsync(x => x.SlotId, x => x.Count);
    }
}

// ===== UserRepository.cs =====

using DnDAgency.Domain.Entities;
using DnDAgency.Domain.Interfaces;
using Microsoft.EntityFrameworkCore;
using ApplicationDbContext = DnDAgency.Infrastructure.Data.ApplicationDbContext;

namespace DnDAgency.Infrastructure.Repositories;

public class UserRepository : GenericRepository<User>, IUserRepository
{
    private readonly ApplicationDbContext _context;

    public UserRepository(ApplicationDbContext context) : base(context)
    {
        _context = context;
    }

    public async Task<User?> GetByEmailAsync(string email)
    {
        return await _dbSet
            .FirstOrDefaultAsync(u => u.Email == email);
    }

    public override async Task<User?> GetByIdAsync(Guid id)
    {
        return await _dbSet
            .Include(u => u.Bookings)
                .ThenInclude(b => b.Slot)
                    .ThenInclude(s => s.Campaign)
            .FirstOrDefaultAsync(u => u.Id == id);
    }

    
}

// ===== BlobStorageService.cs =====

using Azure.Storage.Blobs;

namespace DnDAgency.Infrastructure.Services;

public class BlobStorageService
{
    private readonly BlobServiceClient _client;

    public BlobStorageService(string connectionString)
    {
        _client = new BlobServiceClient(connectionString);
    }

    public async Task UploadFileAsync(string containerName, string blobName, Stream content)
    {
        var container = _client.GetBlobContainerClient(containerName);
        await container.CreateIfNotExistsAsync();
        var blob = container.GetBlobClient(blobName);
        await blob.UploadAsync(content, overwrite: true);
    }
}

// ===== EmailService.cs =====

namespace DnDAgency.Infrastructure.Services;

public class EmailService
{
    public Task SendEmailAsync(string to, string subject, string body)
    {
        // здесь будет интеграция с SMTP или SendGrid
        return Task.CompletedTask;
    }
}

// ===== LocalFileStorageService.cs =====

using DnDAgency.Infrastructure.Interfaces;
using Microsoft.AspNetCore.Http;

namespace DnDAgency.Infrastructure.Services
{
    public class LocalFileStorageService : IFileStorageService
    {
        private readonly string _webRootPath;

        public LocalFileStorageService(string? webRootPath, string contentRootPath)
        {
            _webRootPath = webRootPath ?? Path.Combine(contentRootPath, "wwwroot");
            Directory.CreateDirectory(_webRootPath);
        }

        public async Task<string> SaveFileAsync(IFormFile file, string folder)
        {
            var uploads = Path.Combine(_webRootPath, folder);
            Directory.CreateDirectory(uploads);

            var fileName = $"{Guid.NewGuid()}{Path.GetExtension(file.FileName)}";
            var path = Path.Combine(uploads, fileName);

            using var stream = new FileStream(path, FileMode.Create);
            await file.CopyToAsync(stream);

            // Возвращаем относительный путь без ведущего слэша
            return $"{folder}/{fileName}";
        }

        public Task DeleteFileAsync(string fileUrl)
        {
            var path = Path.Combine(_webRootPath, fileUrl.TrimStart('/'));
            if (File.Exists(path)) File.Delete(path);
            return Task.CompletedTask;
        }
    }
}

// ===== UnitOfWork.cs =====

using DnDAgency.Application.Interfaces;
using DnDAgency.Domain.Interfaces;
using DnDAgency.Infrastructure.Data;
using DnDAgency.Infrastructure.Interfaces;
using DnDAgency.Infrastructure.Repositories;
using Microsoft.EntityFrameworkCore.Storage;

namespace DnDAgency.Infrastructure.UnitOfWork
{
    public class UnitOfWork : IUnitOfWork
    {
        private readonly ApplicationDbContext _context;
        private IDbContextTransaction? _transaction;

        private ICampaignRepository? _campaigns;
        private ISlotRepository? _slots;
        private IMasterRepository? _masters;
        private IUserRepository? _users;
        private IBookingRepository? _bookings;
        private IRefreshTokenRepository? _refreshTokens;

        public UnitOfWork(ApplicationDbContext context)
        {
            _context = context;
        }

        public ICampaignRepository Campaigns =>
            _campaigns ??= new CampaignRepository(_context);

        public ISlotRepository Slots =>
            _slots ??= new SlotRepository(_context);

        public IMasterRepository Masters =>
            _masters ??= new MasterRepository(_context);

        public IUserRepository Users =>
            _users ??= new UserRepository(_context);

        public IBookingRepository Bookings =>
            _bookings ??= new BookingRepository(_context);

        public IRefreshTokenRepository RefreshTokens =>
            _refreshTokens ??= new RefreshTokenRepository(_context);

        public async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            return await _context.SaveChangesAsync(cancellationToken);
        }

        public async Task<IDbContextTransaction> BeginTransactionAsync(CancellationToken cancellationToken = default)
        {
            _transaction = await _context.Database.BeginTransactionAsync(cancellationToken);
            return _transaction;
        }

        public async Task CommitTransactionAsync(CancellationToken cancellationToken = default)
        {
            if (_transaction != null)
            {
                await _transaction.CommitAsync(cancellationToken);
                await _transaction.DisposeAsync();
                _transaction = null;
            }
        }

        public async Task RollbackTransactionAsync(CancellationToken cancellationToken = default)
        {
            if (_transaction != null)
            {
                await _transaction.RollbackAsync(cancellationToken);
                await _transaction.DisposeAsync();
                _transaction = null;
            }
        }

        public void Dispose()
        {
            _transaction?.Dispose();
            _context.Dispose();
        }
    }
}
